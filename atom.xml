<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>神族九帝</title>
  <subtitle>永不言弃</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.shenzjd.cn/"/>
  <updated>2016-07-27T06:20:47.781Z</updated>
  <id>http://www.shenzjd.cn/</id>
  
  <author>
    <name>wu529778790</name>
    <email>529778790@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>总作总结</title>
    <link href="http://www.shenzjd.cn/2016/03/27/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    <id>http://www.shenzjd.cn/2016/03/27/工作总结/</id>
    <published>2016-03-27T06:17:18.000Z</published>
    <updated>2016-07-27T06:20:47.781Z</updated>
    
    <content type="html">&lt;p&gt;总是碰到各种各样的问题，还老是被批评，时刻总结一下总是个好习惯。&lt;/p&gt;
&lt;p&gt;###代码规范&lt;br&gt;因为代码规范的问题，我没少挨骂，对于一名工程师来说，写出规范代码是基本的要求，不仅能方便你后期的维护，还能让别人看懂你的代码。同时，代码规范涉及很多方面的内容，在此作出总结：&lt;/p&gt;
&lt;p&gt;1.命名规范。类名可以多次使用，但是ID名只能使用一次。别让组长在html结构中找出重复的ID名字，也别让组长在css中找到重复的类名，所以为新元素命名的时候要注意检查原来的css中有没有这个类了。还有就是命名要用英文，别用拼音。&lt;/p&gt;
&lt;p&gt;2.图片的使用规范。首先你应该根据最适合自己的方式切图，不要只是依靠UI切图，因为别人不懂如何才能更方便地布局。&lt;/p&gt;
&lt;p&gt;3.注释规范。可能页面当中有很多你曾经引入的js或者css，但是最后你用压缩技术把他们压缩为一个js了，就不能把原来的删除，而要注释掉，这样是为了别人能看到你的引用内容。如果你复制这个页面的时候，很可能会忘记修改注释内容，我曾经因为觉得无所谓就被骂了几次。另外有一个问题就是不用的引入不要想着注释掉或者留着不碍事， 不用的东西也应该删除。&lt;/p&gt;
&lt;p&gt;4.css书写规范。重复的样式应该去掉，相近的元素应该放在一起书写，方便修改。即使后面加入的元素也不要写在最后面，应该写在相近处。&lt;/p&gt;
&lt;p&gt;5.js书写规范。js是比较复杂的东西，而且涉及功能，要写得简单明了，只用一次的函数不必封装，自己写就行了，多次使用的就需要封装起来，方便调用。写js要用ID名确定唯一性，不能用类名，切记切记。代码之间要有空行，运算符号之间要加空格，更规范，别人也看得舒服。&lt;/p&gt;
&lt;p&gt;6.文件管理规范。不用的文件应该删除，图片尽量放上七牛上面进行引用。&lt;/p&gt;
&lt;p&gt;以上是代码和文件规范方面的问题，希望自己能够从这些细节中渐渐改进，长点记性，从而让自己工作更有信心。&lt;/p&gt;
&lt;p&gt;###态度问题&lt;br&gt;对于新人来说，代码写不好，经常出bug是正常现象，只要你态度端正，意识到自己的错误，在工作中再细心，认真一点，其实很多问题都可以避免的，在此总结我的态度问题。&lt;br&gt;1.做事马虎，不认真。其实我对工作是有激情的，就是太懒了，每次做新功能都是做完就好，不求完美，但求无错，问题是你觉得你做得完美了，但是别人眼中，却是错漏百出，特别是一些严谨的工程师。因为不认真检查，导致命名出错，代码重复，出bug。后来我发现其实只要认真检查一遍，就能找出问题并解决。&lt;/p&gt;
&lt;p&gt;2.经常甩锅。做项目是一个多人协作的过程，当我出现问题的时候，我总想把责任推卸给别人，其实根本是自己的能力问题，导致做不出来产品需要的效果嘛，这样的人其实在职场中是非常令人反感的，特别是你的领导是一个不愿意甩锅的人。&lt;/p&gt;
&lt;p&gt;3.不懂装懂。组长无数次提醒我，不懂的东西要问，做不能了的东西要说，别硬撑着，到时候出事了很麻烦，因为刚开始我觉得自己啥都能做，暂时不懂的东西可以慢慢弄懂。不过我忽略了这是职场，不是学校，没有时间给你慢慢弄懂的，因为测试等着你的产品测试，用户等着你的产品用啊，骚年。&lt;/p&gt;
&lt;p&gt;主要就是上面几个态度的问题，一个做事严谨，肯负责任的人，才是能成为大工程师的人。&lt;/p&gt;
&lt;p&gt;###该优化的地方没有优化&lt;br&gt;其实这也是懒惰的表现，因为完成了任务了嘛，但是我的组长是个非常严格的人。产品叫你加一个二维码，我加了，但是样式了ui稿有冲突，整体非常不协调，我觉得没事，反正我的目的达成了，可是组长看到了一顿骂，你看这网站的风格基本是圆润的，你突然搞了个标准90度大箭头在这里，二维码也是小气得可怜，另外这个网站完全没有做seo优化……&lt;br&gt;区分一个优秀的人和一个平庸的人很简单，就是看你做事的态度，区分一个工程师和码农的区别也很简单，就是看你对待程序的态度，是应付，还是为了做得更好。&lt;/p&gt;
&lt;p&gt;其实代码没那么难，难得是你的态度，借此反思总结自身不足，保证以后不犯，也以此告诫各位前端新人，要保持严谨的态度对待你的程序。共勉&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;总是碰到各种各样的问题，还老是被批评，时刻总结一下总是个好习惯。&lt;/p&gt;
&lt;p&gt;###代码规范&lt;br&gt;因为代码规范的问题，我没少挨骂，对于一名工程师来说，写出规范代码是基本的要求，不仅能方便你后期的维护，还能让别人看懂你的代码。同时，代码规范涉及很多方面的内容，在此作出总结
    
    </summary>
    
      <category term="前端总结" scheme="http://www.shenzjd.cn/categories/%E5%89%8D%E7%AB%AF%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>angularjs</title>
    <link href="http://www.shenzjd.cn/2016/03/06/angularjs/"/>
    <id>http://www.shenzjd.cn/2016/03/06/angularjs/</id>
    <published>2016-03-06T10:22:39.000Z</published>
    <updated>2016-07-14T12:14:21.595Z</updated>
    
    <content type="html">&lt;h2 id=&quot;jQuery：用更少的代码，实现更强悍的功能&quot;&gt;&lt;a href=&quot;#jQuery：用更少的代码，实现更强悍的功能&quot; class=&quot;headerlink&quot; title=&quot;jQuery：用更少的代码，实现更强悍的功能&quot;&gt;&lt;/a&gt;jQuery：用更少的代码，实现更强悍的功能&lt;/h2&gt;&lt;p&gt;托互联网日新月异发展的福，浏览器变成了人们接入互联网的入口，而JavaScript 这个曾经的小语种，终于成功地站到了舞台的中央，唤起了开发者的兴趣。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;浏览器里原生的JavaScript有点像汇编语言，不同的浏览器就像不同的CPU架构， 汇编语言各有千秋，这让前端开发者很恼火。聪明人很快发现了这个痛点，于是， 抹平浏览器差异的jQuery库出现了。&lt;br&gt;jQuery由一小撮对浏览器极其熟稔的极客负责抹平不同浏览器的差异，其他开发 者只需要基于jQuery进行开发，可以更好地关注业务实现，而不是把时间花在 适配不同的浏览器上。&lt;br&gt;这样的分工符合经济学原理，开启了一个不可忽视的jQuery时代&lt;/p&gt;
&lt;h2 id=&quot;满眼的全是DOM&quot;&gt;&lt;a href=&quot;#满眼的全是DOM&quot; class=&quot;headerlink&quot; title=&quot;满眼的全是DOM&quot;&gt;&lt;/a&gt;满眼的全是DOM&lt;/h2&gt;&lt;p&gt;jQuery使得开发无刷新动态页面（AJAX）或者单页应用（SPA）变得 相当简单。&lt;br&gt;标准的HTML页面是静态的，被浏览器渲染后就产生了一个DOM树：&lt;br&gt;&lt;img src=&quot;http://o9xxj2r73.bkt.clouddn.com/angularjs/1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;jQuery让静态的文档动起来，通过提供一系列的选择符，jQuery使开发者能够 极其方便地选中一组DOM节点，对其进行操作。&lt;br&gt;这就是jQuery的开发范式。jQuery没有引入什么新的概念，只是朴素地，让你能够更简单 地、低成本地操作DOM：&lt;br&gt;1.用选择符选定一组DOM节点&lt;br&gt;2.操作选中的DOM节点，比如：修改文本、改变属性、挂接事件监听函数、变换DOM等等。&lt;br&gt;3.基本不用考虑跨浏览器的兼容性&lt;/p&gt;
&lt;p&gt;jQuery的API符合大多数开发者的预期，因此，很容易上手。&lt;/p&gt;
&lt;h2 id=&quot;jQuery缺失的环节&quot;&gt;&lt;a href=&quot;#jQuery缺失的环节&quot; class=&quot;headerlink&quot; title=&quot;jQuery缺失的环节&quot;&gt;&lt;/a&gt;jQuery缺失的环节&lt;/h2&gt;&lt;p&gt;jQuery有点像C语言，威力很大，不过要弄出点像样的前端界面，还得花不少功夫 处理琐碎的事情。&lt;br&gt;还能再简单些吗？Misko Hevery认为在某些应用场景下可以。于是，AngularJS诞生了：&lt;/p&gt;
&lt;p&gt;AngularJS引入了三个主要的概念，期望让前端开发更系统化一些：&lt;br&gt;&lt;b&gt;1.声明式界面开发&lt;br&gt;2.双向数据绑定&lt;br&gt;3.使用依赖注入解耦  &lt;/b&gt;&lt;br&gt;很多人在初次接触AngularJS时，都有些吃惊，因为它把前端开发搞的突然严肃起来 了。考虑到Misko曾经是一个Java程序员，这一切就好理解了。&lt;br&gt;Java程序员擅长引入复杂的架构来解决简单的问题，对吧？&lt;br&gt;&lt;!---more---&gt;&lt;/p&gt;
&lt;h2 id=&quot;库-vs-框架&quot;&gt;&lt;a href=&quot;#库-vs-框架&quot; class=&quot;headerlink&quot; title=&quot;库 vs. 框架&quot;&gt;&lt;/a&gt;库 vs. 框架&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://o9xxj2r73.bkt.clouddn.com/angularjs/2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;jQuery是一个库，库总是被动的，就像工具，应用的开发逻辑是你的，在 某一点上需要用一下工具，就用好了。&lt;br&gt;框架则非常不同，这意味着AngularJS为应用已经搭起了一个架子，约定了 一些组成部分，并且实现了这些部分的拼装运行。换句话说， 应用的开发逻辑是AngularJS的，你得跟着它走。&lt;br&gt;所以，AngularJS难学一些，因为它有一个架子在那，你不了解这个架子， 基本没法下手。  &lt;/p&gt;
&lt;h2 id=&quot;重写示例：模板、指令和视图&quot;&gt;&lt;a href=&quot;#重写示例：模板、指令和视图&quot; class=&quot;headerlink&quot; title=&quot;重写示例：模板、指令和视图&quot;&gt;&lt;/a&gt;重写示例：模板、指令和视图&lt;/h2&gt;&lt;p&gt;AngularJS最显著的特点是用静态的HTML文档，就可以生成具有动态行为的页面。&lt;br&gt;还是前面的小时钟示例，我们使用AngularJS模板来重写，示例已经嵌入→_→：&lt;br&gt;HTML文件看起来像普通的HTML，只是其中多了一些特别的标记 （比如：ng-app,ez-clock等等）。在Angular中，这个HTML文件被称为模板。&lt;br&gt;ng-app这样的标记我们称之为指令。模板通过指令指示AngularJS进行必要的操作。 比如：ng-app指令用来通知AngularJS自动引导应用；ez-clock 指令用来通知AngularJS生成指定的时钟组件。&lt;br&gt;当AngularJS启动应用时，它会通过一个编译器解析处理这个模板文件，生成的结果就是： 视图：&lt;br&gt;&lt;img src=&quot;http://o9xxj2r73.bkt.clouddn.com/angularjs/3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们定义了两个部件：模板（包含指令的HTML文件）和指令实现 （JavaScript文件），AngularJS将这两部分拼装起来，生成了最终的视图。&lt;br&gt;有点理解框架的含义了吗？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;angular.module(&amp;quot;ezstuff&amp;quot;,[])//创建模块ezstuff
.directive(&amp;quot;ezClock&amp;quot;,function(){//在模块上注册指令ezClock的类工厂
    return {
        restrict : &amp;quot;E&amp;quot;,
        replace : true,
        template : &amp;quot;&amp;lt;div class=&amp;apos;clock&amp;apos;&amp;gt;&amp;lt;/div&amp;gt;&amp;quot;,
        link : function(scope,element,attrs){
            setInterval(function(){
                //获取当前时间
                var d = new Date();

                //element对应引用该指令的DOM对象的jqLite封装
                element.text(d.toString());
            },1000);
        }
    }
})
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;使用指令封装JavaScript代码&quot;&gt;&lt;a href=&quot;#使用指令封装JavaScript代码&quot; class=&quot;headerlink&quot; title=&quot;使用指令封装JavaScript代码&quot;&gt;&lt;/a&gt;使用指令封装JavaScript代码&lt;/h2&gt;&lt;p&gt;我们在模板中使用了一个自定义的标签ez-clock，而他变成了一个会动的时钟，这期间发生了什么呢？&lt;/p&gt;
&lt;p&gt;可以肯定的是这肯定不是浏览器干的，他不认识ez-block是什么东西，angularjs引入了基本的angularjs库，他会在浏览器载入html文档并且建立好DOM树后，执行以下操作：&lt;/p&gt;
&lt;p&gt;1，找到有ng-app属性的DOM节点&lt;/p&gt;
&lt;p&gt;2，以这个节点为根节点，搜索自定义指令，发现ez-clock&lt;/p&gt;
&lt;p&gt;3，调用ez-clock指令的实现函数（指令类工厂）进行展开我们的定义，ez-clock的展开操作如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 使用一个div元素替换这个自定义标签
2 创建一个定时器，在定时器触发时刷新div元素的innerText
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ez-clock这样的非html标准的标签，在angularjs中之所以称之为指令/directive，就是只看到它时，基础框架需要对其进行解释，以便展开成浏览器可以理解的东西，而这个解释的过程称之为：编译。&lt;/p&gt;
&lt;p&gt;可见，angularjs框架要求将HTML文档和JavaScript代码分割的更清晰，通常混杂在HTML文档中的JavaScript代码，需要一直领的形式进行封装，而模板、指令实现代码这两个不见，则有基础框架负责拼装运行。&lt;/p&gt;
&lt;h2 id=&quot;起点：声明化&quot;&gt;&lt;a href=&quot;#起点：声明化&quot; class=&quot;headerlink&quot; title=&quot;起点：声明化&quot;&gt;&lt;/a&gt;起点：声明化&lt;/h2&gt;&lt;p&gt;基于前面的实例，我们很容易感受到angularjs进行应用开发的一个重要的思维模式：葱构造声明式界面入手。&lt;/p&gt;
&lt;p&gt;事实上，这也是misko开发angularjs最初的动机吧。&lt;br&gt;&lt;img src=&quot;http://o9xxj2r73.bkt.clouddn.com/angularjs/4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在使用angularjs进行开发时，始终应该从构造函数声明式界面模板开始，如果现在的指令不够，那么就定义自己的指令，实现自己的指令、实现自己的指令。这是一个选代的过程。&lt;/p&gt;
&lt;p&gt;记住：指令是新型的API，用界面的声明化作为需求，来指导我们的代码封装。&lt;/p&gt;
&lt;h2 id=&quot;层级的作用域&quot;&gt;&lt;a href=&quot;#层级的作用域&quot; class=&quot;headerlink&quot; title=&quot;层级的作用域&quot;&gt;&lt;/a&gt;层级的作用域&lt;/h2&gt;&lt;p&gt;在angularjs中，ng-app开始的DOM子树上，每个DOM对象都有一个对应的scope对象。比如，在我们的实例中，body对象对应一个scope对象，因为body这时候有ng-app属性，所以这个scope就是$rootscope对象，ez-clock对象也对应有一个scope对象……..&lt;br&gt;&lt;img src=&quot;http://o9xxj2r73.bkt.clouddn.com/angularjs/5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在默认情况下，一个DOM子元素不会创建新的作用域，也就是说，这个子元素所对应的scope对象，其实就是它的最近一级的祖先对象对应的scope对象。比如，在我们的例子上，ez-namecard对应的scope对象，就是它的父对象即body对象的scope对象，恰好也就是$rootScope对象；而ez-namecard有三个div子元素对应的scope对象，也就是$rootScope对象。&lt;/p&gt;
&lt;p&gt;有些指令会导致创建新的作用域，比如ng-controller。如果在一个DOM对象上创建了新的作用域，那么这个scope对象的原型是其最近一级的组件对象的scope对象。&lt;/p&gt;
&lt;p&gt;比如在我们的例子中，如果在ez-namecard上使用ng-controller指令，那么ez-namecard对应的scope对象就不会是body对应的$rootScope对象，但是由于原型继承，所以通过这个scope依然可以访问sb变量。&lt;/p&gt;
&lt;h2 id=&quot;监听数据的变化&quot;&gt;&lt;a href=&quot;#监听数据的变化&quot; class=&quot;headerlink&quot; title=&quot;监听数据的变化&quot;&gt;&lt;/a&gt;监听数据的变化&lt;/h2&gt;&lt;p&gt;我们已经实现了将数据显示到界面上，不过这还不够。&lt;br&gt;由于编译仅仅在启动引导时执行一次，这就意味着我们的link函数只会被调用一次，那么，如果数据变化，在界面上将不会有任何反馈，所以我们要监听数据的变化。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$watch(watchExpression listener ,[objecEquality])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;$watch 方法又三个参数：&lt;br&gt;    1，watchExpression - 要监听的表达式&lt;br&gt;    2，listener - 变化发生时的回调函数，angularjs将这个函数传入新值和旧值&lt;br&gt;    3，objectEquality - 如果要监听表达式的值是一个对象，应当将这个参数置为true&lt;/p&gt;
&lt;h2 id=&quot;数据变化的传播&quot;&gt;&lt;a href=&quot;#数据变化的传播&quot; class=&quot;headerlink&quot; title=&quot;数据变化的传播&quot;&gt;&lt;/a&gt;数据变化的传播&lt;/h2&gt;&lt;p&gt;数据绑定有两个方向：&lt;/p&gt;
&lt;p&gt;数据到界面：我们使用scope对象的$watch()方法监听数据的变化，来更新界面。&lt;/p&gt;
&lt;p&gt;界面到数据：我们在界面的DOM对象上监听变化时间，来更新数据，并通过$apply()方法传播变化。&lt;br&gt;&lt;img src=&quot;http://o9xxj2r73.bkt.clouddn.com/angularjs/6.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;上面的图中，我们把ez-namecard和ez-namecard-editor都绑定到同一个sb对象上，那么在 ez-namecard-editor上进行编辑，将导致sb对象发生变化；由于ez-namecard监听了这个变化， 所以，ez-namecard的显示也应该变化。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;jQuery：用更少的代码，实现更强悍的功能&quot;&gt;&lt;a href=&quot;#jQuery：用更少的代码，实现更强悍的功能&quot; class=&quot;headerlink&quot; title=&quot;jQuery：用更少的代码，实现更强悍的功能&quot;&gt;&lt;/a&gt;jQuery：用更少的代码，实现更强悍的功能&lt;/h2&gt;&lt;p&gt;托互联网日新月异发展的福，浏览器变成了人们接入互联网的入口，而JavaScript 这个曾经的小语种，终于成功地站到了舞台的中央，唤起了开发者的兴趣。
    
    </summary>
    
    
      <category term="angular" scheme="http://www.shenzjd.cn/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>seo优优化</title>
    <link href="http://www.shenzjd.cn/2016/01/24/seo%E4%BC%98%E4%BC%98%E5%8C%96/"/>
    <id>http://www.shenzjd.cn/2016/01/24/seo优优化/</id>
    <published>2016-01-24T13:56:49.000Z</published>
    <updated>2016-07-24T14:03:51.482Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章其实是我本人的总结，因为工作中做完了一个官方网站并成功上线，最后组长检查代码看到我的keyword等一系列信息都是空的，把我骂得狗血淋头。一言不合就作总结，总结一些简单但是我们能做的seo小技巧，送给想把网站做到极致的人。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SEO要点：&lt;br&gt;1.语义化html标签，用合适的标签嵌套合适的内容，不可过分依赖div，对浏览器更友善就能更容易被抓取。&lt;/p&gt;
&lt;p&gt;2.重要的内容html代码放在前面，放在左边。搜索引擎爬虫是从左往右，从上到下进行抓取的，利用布局来实现重要的代码在上面&lt;/p&gt;
&lt;p&gt;3.重要内容要写在html架构里面，蜘蛛不会抓取js的内容，&lt;/p&gt;
&lt;p&gt;4.尽量减少使用iframe，因为蜘蛛不会抓取iframe的内容。&lt;/p&gt;
&lt;p&gt;5.为图片img加上alt属性，加了alt就不必加title了，避免搜索引擎认为我们恶意优化。alt能让图片没加载时都能有文字提示。&lt;/p&gt;
&lt;p&gt;6.需要强调的地方加上title，本页面内跳转a标签内也要加title。&lt;/p&gt;
&lt;p&gt;7.重要的地方可以保留文字，有些地方必须用图，但是蜘蛛不会爬img，这时应该设置文本，再用缩进隐藏的方法去掉文字，例如logo的优化就是这样做的。注意隐藏不能用display：none，蜘蛛不会检索display：none的内容，应用这个方法的标签一般是logo，标题等重要信息&lt;/p&gt;
&lt;p&gt;8.尽量做到js、css、html的分离，不要在html中写样式代码。&lt;/p&gt;
&lt;p&gt;9.注释的东西能去掉应该去掉，对搜索引擎更加友好&lt;/p&gt;
&lt;p&gt;10.css放在头部，js放在尾部，尽量使用外链或者工具对css和js进行压缩&lt;/p&gt;
&lt;p&gt;11.减少http的请求，使页面更快加载。&lt;/p&gt;
&lt;p&gt;12.使用本地缓存更快地访问网站，使用cdn网络，加快用户访问速度。&lt;/p&gt;
&lt;p&gt;13.使用G-ZIP压缩，浏览速度更快，搜索引擎抓取信息量更大&lt;/p&gt;
&lt;p&gt;关键一点是头部的title，description，keyword的设置。&lt;/p&gt;
&lt;p&gt;1.title设置不宜过长，要简短，网站的名字与相关的小内容，一般为10-20个字。不能重复&lt;/p&gt;
&lt;p&gt;2.keywords设置10个关键词，没个词不能太长，简短且符合你网站的特点，不能重复&lt;/p&gt;
&lt;p&gt;3.description，50个字内描述你的网站&lt;/p&gt;
&lt;p&gt;description写原创的话，并包含2-3个关键词比较好&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章其实是我本人的总结，因为工作中做完了一个官方网站并成功上线，最后组长检查代码看到我的keyword等一系列信息都是空的，把我骂得狗血淋头。一言不合就作总结，总结一些简单但是我们能做的seo小技巧，送给想把网站做到极致的人。&lt;br&gt;
    
    </summary>
    
      <category term="前端总结" scheme="http://www.shenzjd.cn/categories/%E5%89%8D%E7%AB%AF%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>MarkDown语法小记</title>
    <link href="http://www.shenzjd.cn/2015/07/14/MarkDown%E8%AF%AD%E6%B3%95%E5%B0%8F%E8%AE%B0/"/>
    <id>http://www.shenzjd.cn/2015/07/14/MarkDown语法小记/</id>
    <published>2015-07-14T11:53:22.000Z</published>
    <updated>2016-07-14T12:14:11.179Z</updated>
    
    <content type="html">&lt;p&gt;刚开始不介绍下作者，内心都说不过去啊，那我就百度科普下。&lt;/p&gt;
&lt;h2 id=&quot;什么是-Markdown？&quot;&gt;&lt;a href=&quot;#什么是-Markdown？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Markdown？&quot;&gt;&lt;/a&gt;什么是 Markdown？&lt;/h2&gt;&lt;p&gt;Markdown 最初是由 John Gruber 和 Aaron Swartz 于 2004 年共同设计的（在这里插一句，Aaron Swartz 是一个富有传奇性的人物，绝对值得大家了解一下。他曾经利用麻省理工学院网络，伪造身份，侵入收费不菲的 JSTOR 论文数据库，总共下载480万篇论文，以供公众免费下载，他也因此被联邦政府起诉逮捕。他于 2013 年自杀，年仅 27 岁）。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;它是一种用来标记文字的语法，这种语法十分简单，十分钟左右的时间就可以完全掌握。只要使用少量的几个特殊字符（常用的有「#」和「*」）就可以完成一些加粗、斜体、引用等排版工作，因其易学性和便捷性而受到越来越多人的欢迎。使用 Markdown 进行排版可以大大地节省你在排版中所花费的时间，让你更加专注于写作。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h1 id=&quot;Markdown-基本语法&quot;&gt;&lt;a href=&quot;#Markdown-基本语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown 基本语法&quot;&gt;&lt;/a&gt;Markdown 基本语法&lt;/h1&gt;&lt;h2 id=&quot;1-设置标题&quot;&gt;&lt;a href=&quot;#1-设置标题&quot; class=&quot;headerlink&quot; title=&quot;1. 设置标题&quot;&gt;&lt;/a&gt;1. 设置标题&lt;/h2&gt;&lt;p&gt;Markdown 最多支持六个级别的标题设置，设置标题也十分简单，只要在在每一行的开始使用井号「#」就可以创建标题，「#」的数量决定了标题的级别。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 我是小美

## 我是小小美

### 我是小小小美
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;2-斜体&quot;&gt;&lt;a href=&quot;#2-斜体&quot; class=&quot;headerlink&quot; title=&quot;2. 斜体&quot;&gt;&lt;/a&gt;2. 斜体&lt;/h2&gt;&lt;p&gt;在想要变斜体的文本两旁各加一个星号「*」就可以将该文本变为斜体了。例如：&lt;/p&gt;
&lt;p&gt;你们知道没有喝脉动的小美长什么样子么？&lt;/p&gt;
&lt;p&gt;长这样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*小美*
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;3-加粗&quot;&gt;&lt;a href=&quot;#3-加粗&quot; class=&quot;headerlink&quot; title=&quot;3.加粗&quot;&gt;&lt;/a&gt;3.加粗&lt;/h2&gt;&lt;p&gt;在想要加粗的文本两旁各加两个星号「**」就可以将该文本加粗了。例如：&lt;/p&gt;
&lt;p&gt;你们知道成天吃肉的小美长什么样子么？&lt;/p&gt;
&lt;p&gt;长这样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**小美**
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你又想加粗这个文本又想把这个文本变斜体的话，在该文本的两旁各加三个星号「&lt;em&gt;*&lt;/em&gt;」就可以了。比如说：&lt;/p&gt;
&lt;p&gt;你们知道没有喝脉动又成天吃肉的小美长什么样子么？&lt;/p&gt;
&lt;p&gt;长这样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;***小美***
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;4-引用&quot;&gt;&lt;a href=&quot;#4-引用&quot; class=&quot;headerlink&quot; title=&quot;4.引用&quot;&gt;&lt;/a&gt;4.引用&lt;/h2&gt;&lt;p&gt;如果想要显示出别人说的话或者是引用其他人的观点的话，只需要在这段话的开头加一个大于号「&amp;gt;」即可。例如：&lt;/p&gt;
&lt;p&gt;有一天，小最对正在疯狂减肥的小美说：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; 你快别减肥了，肉没减下来多少，胸倒是快减没了。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果说想要在引用内再次引用的话，只需要敲下回车然后加两个大于号「&amp;gt;&amp;gt;」就好了，如果想要在引用内的引用继续引用的话（喘口气先）那就加三个大于号「&amp;gt;&amp;gt;&amp;gt;」。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;有一天小美睡不着，她就缠着小最给她讲故事，于是小最就给她讲了一个故事：

&amp;gt; 很久以前有只小美睡不着，要小最给她讲故事，小最就给她讲了下面这个故事：

&amp;gt;&amp;gt; 很久以前有只小美睡不着，要小最给她讲故事，小最就给她讲了下面这个故事：

&amp;gt;&amp;gt;&amp;gt; ……
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;有一天小美睡不着，她就缠着小最给她讲故事，于是小最就给她讲了一个故事：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;很久以前有只小美睡不着，要小最给她讲故事，小最就给她讲了下面这个故事：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;很久以前有只小美睡不着，要小最给她讲故事，小最就给她讲了下面这个故事：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;5-列表&quot;&gt;&lt;a href=&quot;#5-列表&quot; class=&quot;headerlink&quot; title=&quot;5.列表&quot;&gt;&lt;/a&gt;5.列表&lt;/h2&gt;&lt;p&gt;Markdown 支持无序列表和有序列表两种列表。无序列表只需要在列表项加一个减号「-」就可以了。此外，加一个星号「*」或者是一个加号「+」也会有同样的效果。建立有序列表也很简单，一个数字加一个英文句号「.」就可以搞定。如果你想在一个列表项中下设一个子列表的话，我建议大家在子列表前加两个空格，更有区分度。下面就给大家举个栗子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**本周小最要干的事情**

- 继续赚好多钱给小美花！

- 和小美一起去看 Zootopia！

- 超市大采购！

1. 搓衣板

2. 一箱，不，两箱袋装泡面

3. 遥控器

4. 护膝/哭/

- 给小美洗外套洗衬衫洗睡衣洗裙子洗毛衣洗内裤洗袜子……
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;显示效果如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本周小最要干的事情&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;继续赚好多钱给小美花！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;和小美一起去看 Zootopia！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;超市大采购！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;搓衣板&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一箱，不，两箱袋装泡面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遥控器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;护膝/哭/&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;给小美洗外套洗衬衫洗睡衣洗裙子洗毛衣洗内裤洗袜子……&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;刚开始不介绍下作者，内心都说不过去啊，那我就百度科普下。&lt;/p&gt;
&lt;h2 id=&quot;什么是-Markdown？&quot;&gt;&lt;a href=&quot;#什么是-Markdown？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Markdown？&quot;&gt;&lt;/a&gt;什么是 Markdown？&lt;/h2&gt;&lt;p&gt;Markdown 最初是由 John Gruber 和 Aaron Swartz 于 2004 年共同设计的（在这里插一句，Aaron Swartz 是一个富有传奇性的人物，绝对值得大家了解一下。他曾经利用麻省理工学院网络，伪造身份，侵入收费不菲的 JSTOR 论文数据库，总共下载480万篇论文，以供公众免费下载，他也因此被联邦政府起诉逮捕。他于 2013 年自杀，年仅 27 岁）。
    
    </summary>
    
    
      <category term="MarkDown" scheme="http://www.shenzjd.cn/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客填坑记</title>
    <link href="http://www.shenzjd.cn/2015/03/06/Hexo%E5%8D%9A%E5%AE%A2%E5%A1%AB%E5%9D%91%E8%AE%B0/"/>
    <id>http://www.shenzjd.cn/2015/03/06/Hexo博客填坑记/</id>
    <published>2015-03-06T13:59:34.000Z</published>
    <updated>2016-07-14T12:13:59.258Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;　　博客搭建的流程这里就不多说了，都是各种填坑吧，网上的教程数不胜数，但是都是千篇一律，这里主要写下我自己的填坑过程吧。&lt;br&gt;ps：本人不是文科生，也不是什么作家，写作水平有限，就是简单的当个日记，记录下曾经填过的坑！&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;hexo在hexo上面的托管&quot;&gt;&lt;a href=&quot;#hexo在hexo上面的托管&quot; class=&quot;headerlink&quot; title=&quot;hexo在hexo上面的托管&quot;&gt;&lt;/a&gt;hexo在hexo上面的托管&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;　　刚开始在本地搭建博客之后，是直接托管到hexo上面的，但是由于博客多了在github上面的文件越来越多，不便于管理，所以要在创建一个分支，专门用来托管hexo的配置文件，这样就算是换了电脑，也可以进行clone操作，直接操作我们的博客了。  &lt;/p&gt;
&lt;p&gt;　　Hexo部署到GitHub上的文件，是.md（你的博文）转化之后的.html（静态网页）。因此，当你重装电脑或者想在不同电脑上修改博客时，就不可能了（除非你自己写html o(^▽^)o ）。&lt;br&gt;其实，Hexo生成的网站文件中有.gitignore文件，因此它的本意也是想我们将Hexo生成的网站文件存放到GitHub上进行管理的。这样，不仅解决了上述的问题，还可以通过git的版本控制追踪你的博文的修改过程，是极赞的。　　　　　&lt;br&gt;但是，如果每一个GitHub Pages都需要创建一个额外的仓库来存放Hexo网站文件，我感觉很麻烦。&lt;br&gt;所以，我利用了分支！！！&lt;br&gt;简单地说，每个想建立GitHub Pages的仓库，起码有两个分支，一个用来存放Hexo网站的文件，一个用来发布网站。&lt;br&gt;下面以我的博客作为例子详细地讲述。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;我的博客搭建流程&quot;&gt;&lt;a href=&quot;#我的博客搭建流程&quot; class=&quot;headerlink&quot; title=&quot;我的博客搭建流程&quot;&gt;&lt;/a&gt;我的博客搭建流程&lt;/h2&gt;&lt;h4 id=&quot;本地搭建流程&quot;&gt;&lt;a href=&quot;#本地搭建流程&quot; class=&quot;headerlink&quot; title=&quot;本地搭建流程&quot;&gt;&lt;/a&gt;本地搭建流程&lt;/h4&gt;&lt;p&gt;首先确定你的电脑上安装了Node.js和git，然后用npm进行安装hexo&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install -g hexo-cli
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下面就是建站了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hexo init
$ npm install
$ hexo generate
$ hexo server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在打开本地的localhost:4000就可以看到hexo的界面了。&lt;/p&gt;
&lt;h4 id=&quot;github网站流程&quot;&gt;&lt;a href=&quot;#github网站流程&quot; class=&quot;headerlink&quot; title=&quot;github网站流程&quot;&gt;&lt;/a&gt;github网站流程&lt;/h4&gt;&lt;p&gt;1,创建仓库，wu529778790.github.io；&lt;br&gt;2,创建两个分支：master 与 hexo；&lt;br&gt;3,设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；&lt;br&gt;4,使用git clone git@github.com:wu529778790/wu529778790.github.io.git拷贝仓库；&lt;br&gt;5,在本地wu529778790.github.io文件夹下通过Git bash依次执行npm install hexo、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）;&lt;br&gt;6,修改_config.yml中的deploy参数，分支应为master；&lt;br&gt;7,依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件；&lt;br&gt;8,执行hexo generate -d生成网站并部署到GitHub上。&lt;br&gt;9,这样一来，在GitHub上的wu529778790.github.io仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美( •̀ ω •́ )y！&lt;/p&gt;
&lt;h3 id=&quot;填坑记录&quot;&gt;&lt;a href=&quot;#填坑记录&quot; class=&quot;headerlink&quot; title=&quot;填坑记录&quot;&gt;&lt;/a&gt;填坑记录&lt;/h3&gt;&lt;p&gt;首先是没有安装git部署的插件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install hexo-deployer-git --save
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后执行下面的指令即可完成部署&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hexo generate
$ hexo deploy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后要说的是git提交的时候遇见的问题了，不得不总结一下，这次的坑太大，当天应是没解决。提交hexo分支到github上的时候一直报错，百度了各种解决办法还是不行，按照下面的办法终于实现了把配置上传到hexo分支，而自己的文章页面在master分支。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote add origin git@github.com:wu529778790/wu529778790.github.io.git
git add *
git push origin hexo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;好了，此次博客就更新到这吧，感觉也没人可以看懂吧，就是我自己的笔记，啥时候忘了自己来看看，O(∩_∩)O哈哈~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;　　博客搭建的流程这里就不多说了，都是各种填坑吧，网上的教程数不胜数，但是都是千篇一律，这里主要写下我自己的填坑过程吧。&lt;br&gt;ps：本人不是文科生，也不是什么作家，写作水平有限，就是简单的当个日记，记录下曾经填过的坑！&lt;br&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://www.shenzjd.cn/tags/hexo/"/>
    
  </entry>
  
</feed>
