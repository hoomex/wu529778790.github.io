<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>神族九帝</title>
  <subtitle>永不言弃</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.shenzjd.cn/"/>
  <updated>2016-10-10T08:04:44.000Z</updated>
  <id>http://www.shenzjd.cn/</id>
  
  <author>
    <name>wu529778790</name>
    <email>529778790@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试总结</title>
    <link href="http://www.shenzjd.cn/2016/09/10/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <id>http://www.shenzjd.cn/2016/09/10/面试总结/</id>
    <published>2016-09-10T12:49:23.000Z</published>
    <updated>2016-10-10T08:04:44.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;用js写一个函数计算出字符串的长度&quot;&gt;&lt;a href=&quot;#用js写一个函数计算出字符串的长度&quot; class=&quot;headerlink&quot; title=&quot;用js写一个函数计算出字符串的长度&quot;&gt;&lt;/a&gt;用js写一个函数计算出字符串的长度&lt;/h3&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;GBK字符集实际长度计算&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function getStrLeng(str) {
    var realLength = 0;
    var len = str.length;
    var charCode = -1;
    for (var i = 0; i &amp;lt; len; i++) {
        charCode = str.charCodeAt(i);
        if (charCode &amp;gt;= 0 &amp;amp;&amp;amp; charCode &amp;lt;= 128) {
            realLength += 1;
        }else{
            //如果是中文则长度加2；
            realLength += 2;
        }
    }
    return realLength;
}
console.log(getStrLeng(&amp;apos;ahaak522中文&amp;apos;));//12
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;utf8字符集实际长度计算&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//utf8 字符集实际长度计算
function getStrLeng(str) {
    var realLength = 0;
    var len = str.length;
    var charCode = -1;
    for(var i = 0; i &amp;lt; len; i++){
        charCode = str.charCodeAt(i);
        if (charCode &amp;gt;= 0 &amp;amp;&amp;amp; charCode &amp;lt;= 128) { 
            realLength += 1;
        }else{ 
            // 如果是中文则长度加3
            realLength += 3;
        }
    } 
    return realLength;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在JS中字符串的长度不分中英文字符， 每一个字符都算一个长度，这跟PHP里的strlen()函数就不太一样。PHP里的strlen()函数根据字符集把GBK的中文每个2累加，把UTF-8的中文字符每个按3累加。主要是为了匹配数据库的长度范围内，比如GBK的数据库某字段是varchar(10)，那么就相当于5个汉字长度，一个汉字等于两个字母长度。如果是UTF8的数据库则是每个汉字长度为3    &lt;/p&gt;
&lt;h3 id=&quot;html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和HTML5？&quot;&gt;&lt;a href=&quot;#html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和HTML5？&quot; class=&quot;headerlink&quot; title=&quot;html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和HTML5？&quot;&gt;&lt;/a&gt;html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和HTML5？&lt;/h3&gt;&lt;p&gt;HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。  &lt;/p&gt;
&lt;p&gt;绘画 canvas  &lt;/p&gt;
&lt;p&gt;用于媒介回放的 video 和 audio 元素  &lt;/p&gt;
&lt;p&gt;本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；&lt;br&gt;sessionStorage 的数据在浏览器关闭后自动删除 &lt;/p&gt;
&lt;p&gt;语意化更好的内容元素，比如 article、footer、header、nav、section  &lt;/p&gt;
&lt;p&gt;表单控件，calendar、date、time、email、url、search  &lt;/p&gt;
&lt;p&gt;新的技术webworker, websockt, Geolocation  &lt;/p&gt;
&lt;p&gt;移除的元素  &lt;/p&gt;
&lt;p&gt;纯表现的元素：basefont，big，center，font, s，strike，tt，u；  &lt;/p&gt;
&lt;p&gt;对可用性产生负面影响的元素：frame，frameset，noframes；  &lt;/p&gt;
&lt;p&gt;支持HTML5新标签：  &lt;/p&gt;
&lt;p&gt;IE8/IE7/IE6支持通过document.createElement方法产生的标签，&lt;br&gt;可以利用这一特性让这些浏览器支持HTML5新标签，&lt;br&gt;浏览器支持新标签后，还需要添加标签默认的样式&lt;/p&gt;
&lt;h3 id=&quot;请描述一下-cookies，sessionStorage-和-localStorage-的区别？&quot;&gt;&lt;a href=&quot;#请描述一下-cookies，sessionStorage-和-localStorage-的区别？&quot; class=&quot;headerlink&quot; title=&quot;请描述一下 cookies，sessionStorage 和 localStorage 的区别？&quot;&gt;&lt;/a&gt;请描述一下 cookies，sessionStorage 和 localStorage 的区别？&lt;/h3&gt;&lt;p&gt;cookies在浏览器之间来回传递，sessionStorage和localStorage不会，&lt;br&gt;sessionStorage和localStorage储存空间更大，有更多丰富易用的接口，有各自独立存储的空间，  &lt;/p&gt;
&lt;h3 id=&quot;如何实现浏览器内多个标签页之间的通信&quot;&gt;&lt;a href=&quot;#如何实现浏览器内多个标签页之间的通信&quot; class=&quot;headerlink&quot; title=&quot;如何实现浏览器内多个标签页之间的通信?&quot;&gt;&lt;/a&gt;如何实现浏览器内多个标签页之间的通信?&lt;/h3&gt;&lt;p&gt;调用localstorge、cookies等本地存储方式  &lt;/p&gt;
&lt;h3 id=&quot;添加-删除-替换-插入到某个接点的方法&quot;&gt;&lt;a href=&quot;#添加-删除-替换-插入到某个接点的方法&quot; class=&quot;headerlink&quot; title=&quot;添加 删除 替换 插入到某个接点的方法&quot;&gt;&lt;/a&gt;添加 删除 替换 插入到某个接点的方法&lt;/h3&gt;&lt;p&gt;obj.appendChidl()  &lt;/p&gt;
&lt;p&gt;obj.innersetBefore  &lt;/p&gt;
&lt;p&gt;obj.replaceChild  &lt;/p&gt;
&lt;p&gt;obj.removeChild  &lt;/p&gt;
&lt;h3 id=&quot;说一下什么是javascript的同源策略？&quot;&gt;&lt;a href=&quot;#说一下什么是javascript的同源策略？&quot; class=&quot;headerlink&quot; title=&quot;说一下什么是javascript的同源策略？&quot;&gt;&lt;/a&gt;说一下什么是javascript的同源策略？&lt;/h3&gt;&lt;p&gt;一段脚本只能读取来自于同一来源的窗口和文档的属性，这里的同一来源指的是主机名、协议和端口号的组合  &lt;/p&gt;
&lt;h3 id=&quot;编写一个b继承a的方法&quot;&gt;&lt;a href=&quot;#编写一个b继承a的方法&quot; class=&quot;headerlink&quot; title=&quot;编写一个b继承a的方法;&quot;&gt;&lt;/a&gt;编写一个b继承a的方法;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;function A(name){
    this.name = name;
    this.sayHello = function(){alert(this.name+” say Hello!”);};
}
function B(name,id){
    this.temp = A;
    this.temp(name);        //相当于new A();
    delete this.temp;       
     this.id = id;   
    this.checkId = function(ID){alert(this.id==ID)};
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;用js写一个函数计算出字符串的长度&quot;&gt;&lt;a href=&quot;#用js写一个函数计算出字符串的长度&quot; class=&quot;headerlink&quot; title=&quot;用js写一个函数计算出字符串的长度&quot;&gt;&lt;/a&gt;用js写一个函数计算出字符串的长度&lt;/h3&gt;
    
    </summary>
    
    
      <category term="面试" scheme="http://www.shenzjd.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>js通过Ajax异步操作后端xml数据的基本原理</title>
    <link href="http://www.shenzjd.cn/2016/05/30/js%E9%80%9A%E8%BF%87Ajax%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%E5%90%8E%E7%AB%AFxml%E6%95%B0%E6%8D%AE%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
    <id>http://www.shenzjd.cn/2016/05/30/js通过Ajax异步操作后端xml数据的基本原理/</id>
    <published>2016-05-30T04:20:31.000Z</published>
    <updated>2016-08-16T07:26:28.000Z</updated>
    
    <content type="html">&lt;pre&gt;&lt;code&gt;Ajax的核心操作对象是xmlHttpRequest
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　  简化操作步骤：实例化一个xmlHttpRequest对象 ==&amp;gt; 发送请求 ==&amp;gt; 接受响应 ==&amp;gt; 执行回调&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;实例化对象&lt;/p&gt;
&lt;p&gt;　　考虑到兼容问题,非IE5/IE6 使用 =&amp;gt; new XMLHttpRequest();&lt;/p&gt;
&lt;p&gt;　　IE5/IE6使用 =&amp;gt; new ActiveXObject(Microsoft.XMLHTTP);    ☯神呐，请带走IE吧！&lt;/p&gt;
&lt;p&gt;发送请求&lt;/p&gt;
&lt;p&gt;　　使用 XMLHttpRequest 对象的 open(‘GET’,url,async) 和 send() 方法：&lt;/p&gt;
&lt;p&gt;　　❶ open() 有三个参数：&lt;/p&gt;
&lt;p&gt;　　　　分别为http请求方式(get/post) ==》与 POST 相比，GET 更简单也更快，POST 没有数据量限制，不会缓存，相对安全&lt;/p&gt;
&lt;p&gt;　　　　http请求地址 ==》url(统一资源定位符)文件所在服务器的地址&lt;/p&gt;
&lt;p&gt;　　　　async：true（异步）或 false（同步）&lt;/p&gt;
&lt;p&gt;　　❷send(string)   string：仅用于 POST 请求&lt;/p&gt;
&lt;p&gt;接受响应，执行回调&lt;/p&gt;
&lt;p&gt;　　当readyState的值发生改变时，触发readystatechange事件，事件中就可以为所欲为了&lt;/p&gt;
&lt;p&gt;　　readyState==4  =&amp;gt;请求加载完成  /    http的状态为200 =&amp;gt;响应成功&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;

    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
        &amp;lt;title&amp;gt;异步操作集合啦&amp;lt;/title&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
            /*
             * Ajax的核心操作对象是xmlHttpRequest
             *    简化操作步骤：实例化一个xmlHttpRequest对象  ==&amp;gt; 发送请求  ==&amp;gt; 接受响应 ==&amp;gt; 执行回调
             */
            var jsAjax = function() {
                var xmlHttpR = null;
                if(window.ActiveXObject) {
                    //IE5/IE6把xmlHttpRequest封装在window的子对象ActiveXObject中
                    xmlHttpR = new ActiveXObject(Microsoft.XMLHTTP);
                } else if(window.XMLHttpRequest) {
                    //非IE5、IE6
                    xmlHttpR = new XMLHttpRequest();
                }

                if(xmlHttpR) {
                    xmlHttpR.open(&amp;quot;GET&amp;quot;, &amp;quot;ajax.xml&amp;quot;, true);
                    xmlHttpR.onreadystatechange = function(e) {
                        if(xmlHttpR.readyState == 4) {
                            if(xmlHttpR.status == 200) {
                                console.log(xmlHttpR.responseText);
                            }
                        }
                    }
                    xmlHttpR.send(null);
                }
            }
        &amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;

    &amp;lt;body&amp;gt;

&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;/html&amp;gt;

01
    &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
02
    &amp;lt;bookstore&amp;gt;
03
    &amp;lt;book category=&amp;quot;COOKING&amp;quot;&amp;gt;
04
        &amp;lt;title lang=&amp;quot;en&amp;quot;&amp;gt;Everyday Italian&amp;lt;/title&amp;gt;
05
        &amp;lt;author&amp;gt;Giada De Laurentiis&amp;lt;/author&amp;gt;
06
        &amp;lt;year&amp;gt;2005&amp;lt;/year&amp;gt;
07
        &amp;lt;price&amp;gt;30.00&amp;lt;/price&amp;gt;
08
    &amp;lt;/book&amp;gt;
09
    &amp;lt;book category=&amp;quot;CHILDREN&amp;quot;&amp;gt;
10
        &amp;lt;title lang=&amp;quot;en&amp;quot;&amp;gt;Harry Potter&amp;lt;/title&amp;gt;
11
        &amp;lt;author&amp;gt;J K. Rowling&amp;lt;/author&amp;gt;
12
        &amp;lt;year&amp;gt;2005&amp;lt;/year&amp;gt;
13
        &amp;lt;price&amp;gt;29.99&amp;lt;/price&amp;gt;
14
    &amp;lt;/book&amp;gt;
15
    &amp;lt;book category=&amp;quot;WEB&amp;quot;&amp;gt;
16
        &amp;lt;title lang=&amp;quot;en&amp;quot;&amp;gt;Learning XML&amp;lt;/title&amp;gt;
17
        &amp;lt;author&amp;gt;Erik T. Ray&amp;lt;/author&amp;gt;
18
        &amp;lt;year&amp;gt;2003&amp;lt;/year&amp;gt;
19
        &amp;lt;price&amp;gt;39.95&amp;lt;/price&amp;gt;
20
    &amp;lt;/book&amp;gt;
21
    &amp;lt;/bookstore&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;Ajax的核心操作对象是xmlHttpRequest
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　  简化操作步骤：实例化一个xmlHttpRequest对象 ==&amp;gt; 发送请求 ==&amp;gt; 接受响应 ==&amp;gt; 执行回调&lt;/p&gt;
    
    </summary>
    
      <category term="Ajax" scheme="http://www.shenzjd.cn/categories/Ajax/"/>
    
    
      <category term="Ajax" scheme="http://www.shenzjd.cn/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>css规范总结</title>
    <link href="http://www.shenzjd.cn/2016/03/29/css%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93/"/>
    <id>http://www.shenzjd.cn/2016/03/29/css规范总结/</id>
    <published>2016-03-29T14:03:19.000Z</published>
    <updated>2016-07-30T02:41:36.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;CSS文件的分类和引用顺序&quot;&gt;&lt;a href=&quot;#CSS文件的分类和引用顺序&quot; class=&quot;headerlink&quot; title=&quot;CSS文件的分类和引用顺序&quot;&gt;&lt;/a&gt;CSS文件的分类和引用顺序&lt;/h3&gt;&lt;p&gt;通常，一个项目我们只引用一个CSS，但是对于较大的项目，我们需要把CSS文件进行分类。&lt;/p&gt;
&lt;p&gt;我们按照CSS的性质和用途，将CSS文件分成“公共型样式”、“特殊型样式”、“皮肤型样式”，并以此顺序引用（按需求决定是否添加版本号）。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.公共型样式：包括了以下几个部分：“标签的重置和设置默认值”、“统一调用背景图和清除浮动或其他需统一处理的长样式”、“网站通用布局”、“通用模块和其扩展”、“元件和其扩展”、“功能类样式”、“皮肤类样式”。&lt;/p&gt;
&lt;p&gt;2.特殊型样式：当某个栏目或页面的样式与网站整体差异较大或者维护率较高时，可以独立引用一个样式：“特殊的布局、模块和元件及扩展”、“特殊的功能、颜色和背景”，也可以是某个大型控件或模块的独立样式。&lt;/p&gt;
&lt;p&gt;3.皮肤型样式：如果产品需要换肤功能，那么我们需要将颜色、背景等抽离出来放在这里。&lt;/p&gt;
&lt;h3 id=&quot;CSS内部的分类及其顺序&quot;&gt;&lt;a href=&quot;#CSS内部的分类及其顺序&quot; class=&quot;headerlink&quot; title=&quot;CSS内部的分类及其顺序&quot;&gt;&lt;/a&gt;CSS内部的分类及其顺序&lt;/h3&gt;&lt;p&gt;1.重置（reset）和默认（base）（tags）：消除默认样式和浏览器差异，并设置部分标签的初始样式，以减少后面的重复劳动！你可以根据你的网站需求设置！&lt;/p&gt;
&lt;p&gt;2.统一处理：建议在这个位置统一调用背景图（这里指多个布局或模块或元件共用的图）和清除浮动（这里指通用性较高的布局、模块、元件内的清除）等统一设置处理的样式！&lt;/p&gt;
&lt;p&gt;3.布局（grid）（.g-）：将页面分割为几个大块，通常有头部、主体、主栏、侧栏、尾部等！&lt;/p&gt;
&lt;p&gt;4.模块（module）（.m-）：通常是一个语义化的可以重复使用的较大的整体！比如导航、登录、注册、各种列表、评论、搜索等！&lt;/p&gt;
&lt;p&gt;5.元件（unit）（.u-）：通常是一个不可再分的较为小巧的个体，通常被重复用于各种模块中！比如按钮、输入框、loading、图标等！&lt;/p&gt;
&lt;p&gt;6.功能（function）（.f-）：为方便一些常用样式的使用，我们将这些使用率较高的样式剥离出来，按需使用，通常这些选择器具有固定样式表现，比如清除浮动等！不可滥用！&lt;/p&gt;
&lt;p&gt;7.皮肤（skin）（.s-）：如果你需要把皮肤型的样式抽离出来，通常为文字色、背景色（图）、边框色等，非换肤型网站通常只提取文字色！非换肤型网站不可滥用此类！&lt;/p&gt;
&lt;p&gt;8.状态（.z-）：为状态类样式加入前缀，统一标识，方便识别，她只能组合使用或作为后代出现（.u-ipt.z-dis{}，.m-list li.z-sel{}），具体详见命名规则的扩展相关项。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;全局：global.css
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;全局样式为全站公用，为页面样式基础，页面中必须包含。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;结构：layout.css
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;页面结构类型复杂，并且公用类型较多时使用。多用在首页级页面和产品类页面中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;私有：style.css
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;独立页面所使用的样式文件，页面中必须包含。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;模块 module.css
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;产品类页面应用，将可复用类模块进行剥离后，可与其它样式配合使用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;主题 themes.css
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实现换肤功能时应用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;补丁 mend.css
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;功能类和皮肤类样式为表现化的样式，请不要滥用！以上顺序可以按需求适当调整。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* 重置 */
div,p,ul,ol,li{margin:0;padding:0;}
/* 默认 */
strong,em{font-style:normal;font-weight:bold;}
/* 统一调用背景图 */
.m-logo a,.m-nav a,.m-nav em{background:url(images/sprite.png) no-repeat 9999px 9999px;}
/* 统一清除浮动 */
.g-bdc:after,.m-dimg ul:after,.u-tab:after{display:block;visibility:hidden;clear:both;height:0;overflow:hidden;content:&amp;apos;.&amp;apos;;}
.g-bdc,.m-dimg ul,.u-tab{zoom:1;}
/* 布局 */
.g-sd{float:left;width:300px;}
/* 模块 */
.m-logo{width:200px;height:50px;}
/* 元件 */
.u-btn{height:20px;border:1px solid #333;}
/* 功能 */
.f-tac{text-align:center;}
/* 皮肤 */
.s-fc,a.s-fc:hover{color:#fff;}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;选择器顺序&quot;&gt;&lt;a href=&quot;#选择器顺序&quot; class=&quot;headerlink&quot; title=&quot;选择器顺序&quot;&gt;&lt;/a&gt;选择器顺序&lt;/h3&gt;&lt;p&gt;请综合考虑以下顺序依据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从大到小（以选择器的范围为准）&lt;/li&gt;
&lt;li&gt;从低到高（以等级上的高低为准）&lt;/li&gt;
&lt;li&gt;从先到后（以结构上的先后为准）&lt;/li&gt;
&lt;li&gt;从父到子（以结构上的嵌套为准）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下仅为简单示范：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* 从大到小 */
.m-list p{margin:0;padding:0;}
.m-list p.part{margin:1px;padding:1px;}
/* 从低到高 */
.m-logo a{color:#f00;}
.m-logo a:hover{color:#fff;}
/* 从先到后 */
.g-hd{height:60px;}
.g-bd{height:60px;}
.g-ft{height:60px;}
/* 从父到子 */
.m-list{width:300px;}
.m-list .itm{float:left;}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;最佳选择器写法（模块）&quot;&gt;&lt;a href=&quot;#最佳选择器写法（模块）&quot; class=&quot;headerlink&quot; title=&quot;最佳选择器写法（模块）&quot;&gt;&lt;/a&gt;最佳选择器写法（模块）&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;/* 这是某个模块 */
.m-nav{}/* 模块容器 */
.m-nav li,.m-nav a{}/* 先共性  优化组合 */
.m-nav li{}/* 后个性  语义化标签选择器 */
.m-nav a{}/* 后个性中的共性 按结构顺序 */
.m-nav a.a1{}/* 后个性中的个性 */
.m-nav a.a2{}/* 后个性中的个性 */
.m-nav .z-crt a{}/* 交互状态变化 */
.m-nav .z-crt a.a1{}
.m-nav .z-crt a.a2{}
.m-nav .btn{}/* 典型后代选择器 */
.m-nav .btn-1{}/* 典型后代选择器扩展 */
.m-nav .btn-dis{}/* 典型后代选择器扩展（状态） */
.m-nav .btn.z-dis{}/* 作用同上，请二选一（如果可以不兼容IE6时使用） */
.m-nav .m-sch{}/* 控制内部其他模块位置 */
.m-nav .u-sel{}/* 控制内部其他元件位置 */
.m-nav-1{}/* 模块扩展 */
.m-nav-1 li{}
.m-nav-dis{}/* 模块扩展（状态） */
.m-nav.z-dis{}/* 作用同上，请二选一（如果可以不兼容IE6时使用） */
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;统一语义理解和命名&quot;&gt;&lt;a href=&quot;#统一语义理解和命名&quot; class=&quot;headerlink&quot; title=&quot;统一语义理解和命名&quot;&gt;&lt;/a&gt;统一语义理解和命名&lt;/h3&gt;&lt;h4 id=&quot;布局（-g-）&quot;&gt;&lt;a href=&quot;#布局（-g-）&quot; class=&quot;headerlink&quot; title=&quot;布局（.g-）&quot;&gt;&lt;/a&gt;布局（.g-）&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;语义    命名    简写
文档    doc    doc
头部    head    hd
主体    body    bd
尾部    foot    ft
主栏    main    mn
主栏子容器    mainc    mnc
侧栏    side    sd
侧栏子容器    sidec    sdc
盒容器    wrap/box    wrap/box
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;模块（-m-）、元件（-u-）&quot;&gt;&lt;a href=&quot;#模块（-m-）、元件（-u-）&quot; class=&quot;headerlink&quot; title=&quot;模块（.m-）、元件（.u-）&quot;&gt;&lt;/a&gt;模块（.m-）、元件（.u-）&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;语义    命名    简写
导航    nav    nav
子导航    subnav    snav
面包屑    crumb    crm
菜单    menu    menu
选项卡    tab    tab
标题区    head/title    hd/tt
内容区    body/content    bd/ct
列表    list    lst
表格    table    tb
表单    form    fm
热点    hot    hot
排行    top    top
登录    login    log
标志    logo    logo
广告    advertise    ad
搜索    search    sch
幻灯    slide    sld
提示    tips    tips
帮助    help    help
新闻    news    news
下载    download    dld
注册    regist    reg
投票    vote    vote
版权    copyright    cprt
结果    result    rst
标题    title    tt
按钮    button    btn
输入    input    ipt
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;功能（-f-）&quot;&gt;&lt;a href=&quot;#功能（-f-）&quot; class=&quot;headerlink&quot; title=&quot;功能（.f-）&quot;&gt;&lt;/a&gt;功能（.f-）&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;语义    命名    简写
浮动清除    clearboth    cb
向左浮动    floatleft    fl
向右浮动    floatright    fr
内联块级    inlineblock    ib
文本居中    textaligncenter    tac
文本居右    textalignright    tar
文本居左    textalignleft    tal
垂直居中    verticalalignmiddle    vam
溢出隐藏    overflowhidden    oh
完全消失    displaynone    dn
字体大小    fontsize    fs
字体粗细    fontweight    fw
皮肤（.s-）
语义    命名    简写
字体颜色    fontcolor    fc
背景    background    bg
背景颜色    backgroundcolor    bgc
背景图片    backgroundimage    bgi
背景定位    backgroundposition    bgp
边框颜色    bordercolor    bdc
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;状态（-z-）&quot;&gt;&lt;a href=&quot;#状态（-z-）&quot; class=&quot;headerlink&quot; title=&quot;状态（.z-）&quot;&gt;&lt;/a&gt;状态（.z-）&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;语义    命名    简写
选中    selected    sel
当前    current    crt
显示    show    show
隐藏    hide    hide
打开    open    open
关闭    close    close
出错    error    err
不可用    disabled    dis
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;CSS命名规范-规则-常用的CSS命名规则&quot;&gt;&lt;a href=&quot;#CSS命名规范-规则-常用的CSS命名规则&quot; class=&quot;headerlink&quot; title=&quot;CSS命名规范(规则)常用的CSS命名规则&quot;&gt;&lt;/a&gt;CSS命名规范(规则)常用的CSS命名规则&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;　　头：header
　　内容：content/container
　　尾：footer
　　导航：nav
　　侧栏：sidebar
　　栏目：column
　　页面外围控制整体佈局宽度：wrapper
　　左右中：left right center
　　登录条：loginbar
　　标志：logo
　　广告：banner
　　页面主体：main
　　热点：hot
　　新闻：news
　　下载：download
　　子导航：subnav
　　菜单：menu
　　子菜单：submenu
　　搜索：search
　　友情链接：friendlink
　　页脚：footer
　　版权：copyright
　　滚动：scroll
　　内容：content
　　标签：tags
　　文章列表：list
　　提示信息：msg
　　小技巧：tips
　　栏目标题：title
　　加入：joinus
　　指南：guide
　　服务：service
　　注册：regsiter
　　状态：status
　　投票：vote
　　合作伙伴：partner
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;注释的写法&quot;&gt;&lt;a href=&quot;#注释的写法&quot; class=&quot;headerlink&quot; title=&quot;注释的写法:&quot;&gt;&lt;/a&gt;注释的写法:&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;　　/* Header */
　　内容区
　　/* End Header */
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;Id的命名&quot;&gt;&lt;a href=&quot;#Id的命名&quot; class=&quot;headerlink&quot; title=&quot;Id的命名:&quot;&gt;&lt;/a&gt;Id的命名:&lt;/h4&gt;&lt;h5 id=&quot;1-页面结构&quot;&gt;&lt;a href=&quot;#1-页面结构&quot; class=&quot;headerlink&quot; title=&quot;1)页面结构&quot;&gt;&lt;/a&gt;1)页面结构&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;　　容器: container
　　页头：header
　　内容：content/container
　　页面主体：main
　　页尾：footer
　　导航：nav
　　侧栏：sidebar
　　栏目：column
　　页面外围控制整体佈局宽度：wrapper
　　左右中：left right center
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&quot;2-导航&quot;&gt;&lt;a href=&quot;#2-导航&quot; class=&quot;headerlink&quot; title=&quot;(2)导航&quot;&gt;&lt;/a&gt;(2)导航&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;　　导航：nav
　　主导航：mainnav
　　子导航：subnav
　　顶导航：topnav
　　边导航：sidebar
　　左导航：leftsidebar
　　右导航：rightsidebar
　　菜单：menu
　　子菜单：submenu
　　标题: title
　　摘要: summary
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&quot;3-功能&quot;&gt;&lt;a href=&quot;#3-功能&quot; class=&quot;headerlink&quot; title=&quot;(3)功能&quot;&gt;&lt;/a&gt;(3)功能&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;　　标志：logo
　　广告：banner
　　登陆：login
　　登录条：loginbar
　　注册：register
　　搜索：search
　　功能区：shop
　　标题：title
　　加入：joinus
　　状态：status
　　按钮：btn
　　滚动：scroll
　　标籤页：tab
　　文章列表：list
　　提示信息：msg
　　当前的: current
　　小技巧：tips
　　图标: icon
　　注释：note
　　指南：guild
　　服务：service
　　热点：hot
　　新闻：news
　　下载：download
　　投票：vote
　　合作伙伴：partner
　　友情链接：link
　　版权：copyright
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;CSS样式表文件命名&quot;&gt;&lt;a href=&quot;#CSS样式表文件命名&quot; class=&quot;headerlink&quot; title=&quot;CSS样式表文件命名&quot;&gt;&lt;/a&gt;CSS样式表文件命名&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;　　主要的 master.css
　　模块 module.css
　　基本共用 base.css
　　布局、版面 layout.css
　　主题 themes.css
　　专栏 columns.css
　　文字 font.css
　　表单 forms.css
　　补丁 mend.css
　　打印 print.css
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;CSS文件的分类和引用顺序&quot;&gt;&lt;a href=&quot;#CSS文件的分类和引用顺序&quot; class=&quot;headerlink&quot; title=&quot;CSS文件的分类和引用顺序&quot;&gt;&lt;/a&gt;CSS文件的分类和引用顺序&lt;/h3&gt;&lt;p&gt;通常，一个项目我们只引用一个CSS，但是对于较大的项目，我们需要把CSS文件进行分类。&lt;/p&gt;
&lt;p&gt;我们按照CSS的性质和用途，将CSS文件分成“公共型样式”、“特殊型样式”、“皮肤型样式”，并以此顺序引用（按需求决定是否添加版本号）。&lt;br&gt;
    
    </summary>
    
      <category term="css" scheme="http://www.shenzjd.cn/categories/css/"/>
    
    
      <category term="css" scheme="http://www.shenzjd.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>总作总结</title>
    <link href="http://www.shenzjd.cn/2016/03/27/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    <id>http://www.shenzjd.cn/2016/03/27/工作总结/</id>
    <published>2016-03-27T06:17:18.000Z</published>
    <updated>2016-07-27T06:22:16.000Z</updated>
    
    <content type="html">&lt;p&gt;总是碰到各种各样的问题，还老是被批评，时刻总结一下总是个好习惯。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;代码规范&quot;&gt;&lt;a href=&quot;#代码规范&quot; class=&quot;headerlink&quot; title=&quot;代码规范&quot;&gt;&lt;/a&gt;代码规范&lt;/h3&gt;&lt;p&gt;因为代码规范的问题，我没少挨骂，对于一名工程师来说，写出规范代码是基本的要求，不仅能方便你后期的维护，还能让别人看懂你的代码。同时，代码规范涉及很多方面的内容，在此作出总结：&lt;/p&gt;
&lt;p&gt;1.命名规范。类名可以多次使用，但是ID名只能使用一次。别让组长在html结构中找出重复的ID名字，也别让组长在css中找到重复的类名，所以为新元素命名的时候要注意检查原来的css中有没有这个类了。还有就是命名要用英文，别用拼音。&lt;/p&gt;
&lt;p&gt;2.图片的使用规范。首先你应该根据最适合自己的方式切图，不要只是依靠UI切图，因为别人不懂如何才能更方便地布局。&lt;/p&gt;
&lt;p&gt;3.注释规范。可能页面当中有很多你曾经引入的js或者css，但是最后你用压缩技术把他们压缩为一个js了，就不能把原来的删除，而要注释掉，这样是为了别人能看到你的引用内容。如果你复制这个页面的时候，很可能会忘记修改注释内容，我曾经因为觉得无所谓就被骂了几次。另外有一个问题就是不用的引入不要想着注释掉或者留着不碍事， 不用的东西也应该删除。&lt;/p&gt;
&lt;p&gt;4.css书写规范。重复的样式应该去掉，相近的元素应该放在一起书写，方便修改。即使后面加入的元素也不要写在最后面，应该写在相近处。&lt;/p&gt;
&lt;p&gt;5.js书写规范。js是比较复杂的东西，而且涉及功能，要写得简单明了，只用一次的函数不必封装，自己写就行了，多次使用的就需要封装起来，方便调用。写js要用ID名确定唯一性，不能用类名，切记切记。代码之间要有空行，运算符号之间要加空格，更规范，别人也看得舒服。&lt;/p&gt;
&lt;p&gt;6.文件管理规范。不用的文件应该删除，图片尽量放上七牛上面进行引用。&lt;/p&gt;
&lt;p&gt;以上是代码和文件规范方面的问题，希望自己能够从这些细节中渐渐改进，长点记性，从而让自己工作更有信心。&lt;/p&gt;
&lt;h3 id=&quot;态度问题&quot;&gt;&lt;a href=&quot;#态度问题&quot; class=&quot;headerlink&quot; title=&quot;态度问题&quot;&gt;&lt;/a&gt;态度问题&lt;/h3&gt;&lt;p&gt;对于新人来说，代码写不好，经常出bug是正常现象，只要你态度端正，意识到自己的错误，在工作中再细心，认真一点，其实很多问题都可以避免的，在此总结我的态度问题。&lt;br&gt;1.做事马虎，不认真。其实我对工作是有激情的，就是太懒了，每次做新功能都是做完就好，不求完美，但求无错，问题是你觉得你做得完美了，但是别人眼中，却是错漏百出，特别是一些严谨的工程师。因为不认真检查，导致命名出错，代码重复，出bug。后来我发现其实只要认真检查一遍，就能找出问题并解决。&lt;/p&gt;
&lt;p&gt;2.经常甩锅。做项目是一个多人协作的过程，当我出现问题的时候，我总想把责任推卸给别人，其实根本是自己的能力问题，导致做不出来产品需要的效果嘛，这样的人其实在职场中是非常令人反感的，特别是你的领导是一个不愿意甩锅的人。&lt;/p&gt;
&lt;p&gt;3.不懂装懂。组长无数次提醒我，不懂的东西要问，做不能了的东西要说，别硬撑着，到时候出事了很麻烦，因为刚开始我觉得自己啥都能做，暂时不懂的东西可以慢慢弄懂。不过我忽略了这是职场，不是学校，没有时间给你慢慢弄懂的，因为测试等着你的产品测试，用户等着你的产品用啊，骚年。&lt;/p&gt;
&lt;p&gt;主要就是上面几个态度的问题，一个做事严谨，肯负责任的人，才是能成为大工程师的人。&lt;/p&gt;
&lt;h3 id=&quot;该优化的地方没有优化&quot;&gt;&lt;a href=&quot;#该优化的地方没有优化&quot; class=&quot;headerlink&quot; title=&quot;该优化的地方没有优化&quot;&gt;&lt;/a&gt;该优化的地方没有优化&lt;/h3&gt;&lt;p&gt;其实这也是懒惰的表现，因为完成了任务了嘛，但是我的组长是个非常严格的人。产品叫你加一个二维码，我加了，但是样式了ui稿有冲突，整体非常不协调，我觉得没事，反正我的目的达成了，可是组长看到了一顿骂，你看这网站的风格基本是圆润的，你突然搞了个标准90度大箭头在这里，二维码也是小气得可怜，另外这个网站完全没有做seo优化……&lt;br&gt;区分一个优秀的人和一个平庸的人很简单，就是看你做事的态度，区分一个工程师和码农的区别也很简单，就是看你对待程序的态度，是应付，还是为了做得更好。&lt;/p&gt;
&lt;p&gt;其实代码没那么难，难得是你的态度，借此反思总结自身不足，保证以后不犯，也以此告诫各位前端新人，要保持严谨的态度对待你的程序。共勉&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;总是碰到各种各样的问题，还老是被批评，时刻总结一下总是个好习惯。&lt;br&gt;
    
    </summary>
    
      <category term="前端总结" scheme="http://www.shenzjd.cn/categories/%E5%89%8D%E7%AB%AF%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>js笔记</title>
    <link href="http://www.shenzjd.cn/2016/03/14/js%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.shenzjd.cn/2016/03/14/js笔记/</id>
    <published>2016-03-14T07:17:43.000Z</published>
    <updated>2016-10-14T07:20:44.817Z</updated>
    
    <content type="html">&lt;h3 id=&quot;js位置篇之窗口&quot;&gt;&lt;a href=&quot;#js位置篇之窗口&quot; class=&quot;headerlink&quot; title=&quot;js位置篇之窗口&quot;&gt;&lt;/a&gt;js位置篇之窗口&lt;/h3&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;pre&gt;&lt;code&gt;//屏幕大小
window.screen.width;
window.screen.height;

//视图
window.innerWidth;
window.innerHeight;
document.documentElement.clientWidth;
document.documentElement.clientHeight;

//页面的大小
document.documentElement.offsetWidth;
document.documentElement.offsetHeight;
document.body.clientWidth;
document.body.clientHeight;

//滚动条的位置
document.documentElement.scrollLeft;
document.documentElement.scrollTop;
document.body.scrollTop;
document.body.scrollLeft;

//跨浏览器获取滚动条的位置
function getScroll(){
    return {
        top : document.documentElement.scrollTop || document.body.scrollTop,
        left : document.documentElement.scrollLeft || document.body.scrollLeft
    }
}
var scroll = getScroll();
scroll.top;
scroll.left;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;js位置篇之窗口&quot;&gt;&lt;a href=&quot;#js位置篇之窗口&quot; class=&quot;headerlink&quot; title=&quot;js位置篇之窗口&quot;&gt;&lt;/a&gt;js位置篇之窗口&lt;/h3&gt;
    
    </summary>
    
    
      <category term="js笔记" scheme="http://www.shenzjd.cn/tags/js%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>angularjs</title>
    <link href="http://www.shenzjd.cn/2016/03/06/angularjs/"/>
    <id>http://www.shenzjd.cn/2016/03/06/angularjs/</id>
    <published>2016-03-06T10:22:39.000Z</published>
    <updated>2016-07-14T12:14:22.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;jQuery：用更少的代码，实现更强悍的功能&quot;&gt;&lt;a href=&quot;#jQuery：用更少的代码，实现更强悍的功能&quot; class=&quot;headerlink&quot; title=&quot;jQuery：用更少的代码，实现更强悍的功能&quot;&gt;&lt;/a&gt;jQuery：用更少的代码，实现更强悍的功能&lt;/h2&gt;&lt;p&gt;托互联网日新月异发展的福，浏览器变成了人们接入互联网的入口，而JavaScript 这个曾经的小语种，终于成功地站到了舞台的中央，唤起了开发者的兴趣。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;浏览器里原生的JavaScript有点像汇编语言，不同的浏览器就像不同的CPU架构， 汇编语言各有千秋，这让前端开发者很恼火。聪明人很快发现了这个痛点，于是， 抹平浏览器差异的jQuery库出现了。&lt;br&gt;jQuery由一小撮对浏览器极其熟稔的极客负责抹平不同浏览器的差异，其他开发 者只需要基于jQuery进行开发，可以更好地关注业务实现，而不是把时间花在 适配不同的浏览器上。&lt;br&gt;这样的分工符合经济学原理，开启了一个不可忽视的jQuery时代&lt;/p&gt;
&lt;h2 id=&quot;满眼的全是DOM&quot;&gt;&lt;a href=&quot;#满眼的全是DOM&quot; class=&quot;headerlink&quot; title=&quot;满眼的全是DOM&quot;&gt;&lt;/a&gt;满眼的全是DOM&lt;/h2&gt;&lt;p&gt;jQuery使得开发无刷新动态页面（AJAX）或者单页应用（SPA）变得 相当简单。&lt;br&gt;标准的HTML页面是静态的，被浏览器渲染后就产生了一个DOM树：&lt;br&gt;&lt;img src=&quot;http://o9xxj2r73.bkt.clouddn.com/angularjs/1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;jQuery让静态的文档动起来，通过提供一系列的选择符，jQuery使开发者能够 极其方便地选中一组DOM节点，对其进行操作。&lt;br&gt;这就是jQuery的开发范式。jQuery没有引入什么新的概念，只是朴素地，让你能够更简单 地、低成本地操作DOM：&lt;br&gt;1.用选择符选定一组DOM节点&lt;br&gt;2.操作选中的DOM节点，比如：修改文本、改变属性、挂接事件监听函数、变换DOM等等。&lt;br&gt;3.基本不用考虑跨浏览器的兼容性&lt;/p&gt;
&lt;p&gt;jQuery的API符合大多数开发者的预期，因此，很容易上手。&lt;/p&gt;
&lt;h2 id=&quot;jQuery缺失的环节&quot;&gt;&lt;a href=&quot;#jQuery缺失的环节&quot; class=&quot;headerlink&quot; title=&quot;jQuery缺失的环节&quot;&gt;&lt;/a&gt;jQuery缺失的环节&lt;/h2&gt;&lt;p&gt;jQuery有点像C语言，威力很大，不过要弄出点像样的前端界面，还得花不少功夫 处理琐碎的事情。&lt;br&gt;还能再简单些吗？Misko Hevery认为在某些应用场景下可以。于是，AngularJS诞生了：&lt;/p&gt;
&lt;p&gt;AngularJS引入了三个主要的概念，期望让前端开发更系统化一些：&lt;br&gt;&lt;b&gt;1.声明式界面开发&lt;br&gt;2.双向数据绑定&lt;br&gt;3.使用依赖注入解耦  &lt;/b&gt;&lt;br&gt;很多人在初次接触AngularJS时，都有些吃惊，因为它把前端开发搞的突然严肃起来 了。考虑到Misko曾经是一个Java程序员，这一切就好理解了。&lt;br&gt;Java程序员擅长引入复杂的架构来解决简单的问题，对吧？&lt;br&gt;&lt;!---more---&gt;&lt;/p&gt;
&lt;h2 id=&quot;库-vs-框架&quot;&gt;&lt;a href=&quot;#库-vs-框架&quot; class=&quot;headerlink&quot; title=&quot;库 vs. 框架&quot;&gt;&lt;/a&gt;库 vs. 框架&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://o9xxj2r73.bkt.clouddn.com/angularjs/2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;jQuery是一个库，库总是被动的，就像工具，应用的开发逻辑是你的，在 某一点上需要用一下工具，就用好了。&lt;br&gt;框架则非常不同，这意味着AngularJS为应用已经搭起了一个架子，约定了 一些组成部分，并且实现了这些部分的拼装运行。换句话说， 应用的开发逻辑是AngularJS的，你得跟着它走。&lt;br&gt;所以，AngularJS难学一些，因为它有一个架子在那，你不了解这个架子， 基本没法下手。  &lt;/p&gt;
&lt;h2 id=&quot;重写示例：模板、指令和视图&quot;&gt;&lt;a href=&quot;#重写示例：模板、指令和视图&quot; class=&quot;headerlink&quot; title=&quot;重写示例：模板、指令和视图&quot;&gt;&lt;/a&gt;重写示例：模板、指令和视图&lt;/h2&gt;&lt;p&gt;AngularJS最显著的特点是用静态的HTML文档，就可以生成具有动态行为的页面。&lt;br&gt;还是前面的小时钟示例，我们使用AngularJS模板来重写，示例已经嵌入→_→：&lt;br&gt;HTML文件看起来像普通的HTML，只是其中多了一些特别的标记 （比如：ng-app,ez-clock等等）。在Angular中，这个HTML文件被称为模板。&lt;br&gt;ng-app这样的标记我们称之为指令。模板通过指令指示AngularJS进行必要的操作。 比如：ng-app指令用来通知AngularJS自动引导应用；ez-clock 指令用来通知AngularJS生成指定的时钟组件。&lt;br&gt;当AngularJS启动应用时，它会通过一个编译器解析处理这个模板文件，生成的结果就是： 视图：&lt;br&gt;&lt;img src=&quot;http://o9xxj2r73.bkt.clouddn.com/angularjs/3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们定义了两个部件：模板（包含指令的HTML文件）和指令实现 （JavaScript文件），AngularJS将这两部分拼装起来，生成了最终的视图。&lt;br&gt;有点理解框架的含义了吗？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;angular.module(&amp;quot;ezstuff&amp;quot;,[])//创建模块ezstuff
.directive(&amp;quot;ezClock&amp;quot;,function(){//在模块上注册指令ezClock的类工厂
    return {
        restrict : &amp;quot;E&amp;quot;,
        replace : true,
        template : &amp;quot;&amp;lt;div class=&amp;apos;clock&amp;apos;&amp;gt;&amp;lt;/div&amp;gt;&amp;quot;,
        link : function(scope,element,attrs){
            setInterval(function(){
                //获取当前时间
                var d = new Date();

                //element对应引用该指令的DOM对象的jqLite封装
                element.text(d.toString());
            },1000);
        }
    }
})
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;使用指令封装JavaScript代码&quot;&gt;&lt;a href=&quot;#使用指令封装JavaScript代码&quot; class=&quot;headerlink&quot; title=&quot;使用指令封装JavaScript代码&quot;&gt;&lt;/a&gt;使用指令封装JavaScript代码&lt;/h2&gt;&lt;p&gt;我们在模板中使用了一个自定义的标签ez-clock，而他变成了一个会动的时钟，这期间发生了什么呢？&lt;/p&gt;
&lt;p&gt;可以肯定的是这肯定不是浏览器干的，他不认识ez-block是什么东西，angularjs引入了基本的angularjs库，他会在浏览器载入html文档并且建立好DOM树后，执行以下操作：&lt;/p&gt;
&lt;p&gt;1，找到有ng-app属性的DOM节点&lt;/p&gt;
&lt;p&gt;2，以这个节点为根节点，搜索自定义指令，发现ez-clock&lt;/p&gt;
&lt;p&gt;3，调用ez-clock指令的实现函数（指令类工厂）进行展开我们的定义，ez-clock的展开操作如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 使用一个div元素替换这个自定义标签
2 创建一个定时器，在定时器触发时刷新div元素的innerText
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ez-clock这样的非html标准的标签，在angularjs中之所以称之为指令/directive，就是只看到它时，基础框架需要对其进行解释，以便展开成浏览器可以理解的东西，而这个解释的过程称之为：编译。&lt;/p&gt;
&lt;p&gt;可见，angularjs框架要求将HTML文档和JavaScript代码分割的更清晰，通常混杂在HTML文档中的JavaScript代码，需要一直领的形式进行封装，而模板、指令实现代码这两个不见，则有基础框架负责拼装运行。&lt;/p&gt;
&lt;h2 id=&quot;起点：声明化&quot;&gt;&lt;a href=&quot;#起点：声明化&quot; class=&quot;headerlink&quot; title=&quot;起点：声明化&quot;&gt;&lt;/a&gt;起点：声明化&lt;/h2&gt;&lt;p&gt;基于前面的实例，我们很容易感受到angularjs进行应用开发的一个重要的思维模式：葱构造声明式界面入手。&lt;/p&gt;
&lt;p&gt;事实上，这也是misko开发angularjs最初的动机吧。&lt;br&gt;&lt;img src=&quot;http://o9xxj2r73.bkt.clouddn.com/angularjs/4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在使用angularjs进行开发时，始终应该从构造函数声明式界面模板开始，如果现在的指令不够，那么就定义自己的指令，实现自己的指令、实现自己的指令。这是一个选代的过程。&lt;/p&gt;
&lt;p&gt;记住：指令是新型的API，用界面的声明化作为需求，来指导我们的代码封装。&lt;/p&gt;
&lt;h2 id=&quot;层级的作用域&quot;&gt;&lt;a href=&quot;#层级的作用域&quot; class=&quot;headerlink&quot; title=&quot;层级的作用域&quot;&gt;&lt;/a&gt;层级的作用域&lt;/h2&gt;&lt;p&gt;在angularjs中，ng-app开始的DOM子树上，每个DOM对象都有一个对应的scope对象。比如，在我们的实例中，body对象对应一个scope对象，因为body这时候有ng-app属性，所以这个scope就是$rootscope对象，ez-clock对象也对应有一个scope对象……..&lt;br&gt;&lt;img src=&quot;http://o9xxj2r73.bkt.clouddn.com/angularjs/5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在默认情况下，一个DOM子元素不会创建新的作用域，也就是说，这个子元素所对应的scope对象，其实就是它的最近一级的祖先对象对应的scope对象。比如，在我们的例子上，ez-namecard对应的scope对象，就是它的父对象即body对象的scope对象，恰好也就是$rootScope对象；而ez-namecard有三个div子元素对应的scope对象，也就是$rootScope对象。&lt;/p&gt;
&lt;p&gt;有些指令会导致创建新的作用域，比如ng-controller。如果在一个DOM对象上创建了新的作用域，那么这个scope对象的原型是其最近一级的组件对象的scope对象。&lt;/p&gt;
&lt;p&gt;比如在我们的例子中，如果在ez-namecard上使用ng-controller指令，那么ez-namecard对应的scope对象就不会是body对应的$rootScope对象，但是由于原型继承，所以通过这个scope依然可以访问sb变量。&lt;/p&gt;
&lt;h2 id=&quot;监听数据的变化&quot;&gt;&lt;a href=&quot;#监听数据的变化&quot; class=&quot;headerlink&quot; title=&quot;监听数据的变化&quot;&gt;&lt;/a&gt;监听数据的变化&lt;/h2&gt;&lt;p&gt;我们已经实现了将数据显示到界面上，不过这还不够。&lt;br&gt;由于编译仅仅在启动引导时执行一次，这就意味着我们的link函数只会被调用一次，那么，如果数据变化，在界面上将不会有任何反馈，所以我们要监听数据的变化。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$watch(watchExpression listener ,[objecEquality])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;$watch 方法又三个参数：&lt;br&gt;    1，watchExpression - 要监听的表达式&lt;br&gt;    2，listener - 变化发生时的回调函数，angularjs将这个函数传入新值和旧值&lt;br&gt;    3，objectEquality - 如果要监听表达式的值是一个对象，应当将这个参数置为true&lt;/p&gt;
&lt;h2 id=&quot;数据变化的传播&quot;&gt;&lt;a href=&quot;#数据变化的传播&quot; class=&quot;headerlink&quot; title=&quot;数据变化的传播&quot;&gt;&lt;/a&gt;数据变化的传播&lt;/h2&gt;&lt;p&gt;数据绑定有两个方向：&lt;/p&gt;
&lt;p&gt;数据到界面：我们使用scope对象的$watch()方法监听数据的变化，来更新界面。&lt;/p&gt;
&lt;p&gt;界面到数据：我们在界面的DOM对象上监听变化时间，来更新数据，并通过$apply()方法传播变化。&lt;br&gt;&lt;img src=&quot;http://o9xxj2r73.bkt.clouddn.com/angularjs/6.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;上面的图中，我们把ez-namecard和ez-namecard-editor都绑定到同一个sb对象上，那么在 ez-namecard-editor上进行编辑，将导致sb对象发生变化；由于ez-namecard监听了这个变化， 所以，ez-namecard的显示也应该变化。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;jQuery：用更少的代码，实现更强悍的功能&quot;&gt;&lt;a href=&quot;#jQuery：用更少的代码，实现更强悍的功能&quot; class=&quot;headerlink&quot; title=&quot;jQuery：用更少的代码，实现更强悍的功能&quot;&gt;&lt;/a&gt;jQuery：用更少的代码，实现更强悍的功能&lt;/h2&gt;&lt;p&gt;托互联网日新月异发展的福，浏览器变成了人们接入互联网的入口，而JavaScript 这个曾经的小语种，终于成功地站到了舞台的中央，唤起了开发者的兴趣。
    
    </summary>
    
    
      <category term="angular" scheme="http://www.shenzjd.cn/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>JS全局污染</title>
    <link href="http://www.shenzjd.cn/2016/02/16/JS%E5%85%A8%E5%B1%80%E6%B1%A1%E6%9F%93/"/>
    <id>http://www.shenzjd.cn/2016/02/16/JS全局污染/</id>
    <published>2016-02-16T03:37:45.000Z</published>
    <updated>2016-10-10T09:04:16.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;原则&quot;&gt;&lt;a href=&quot;#原则&quot; class=&quot;headerlink&quot; title=&quot;原则&quot;&gt;&lt;/a&gt;原则&lt;/h2&gt;&lt;p&gt;1.用匿名函数将脚本包起来；&lt;/p&gt;
&lt;p&gt;2.使用多级命名空间。&lt;/p&gt;
&lt;p&gt;这第二条“使用多级命名空间”这个，我觉得并不是很完美的好主意。因为如果级数太多的话会造成变量名字变得长的一逼。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;改进过程&quot;&gt;&lt;a href=&quot;#改进过程&quot; class=&quot;headerlink&quot; title=&quot;改进过程&quot;&gt;&lt;/a&gt;改进过程&lt;/h2&gt;&lt;h3 id=&quot;原始代码&quot;&gt;&lt;a href=&quot;#原始代码&quot; class=&quot;headerlink&quot; title=&quot;原始代码&quot;&gt;&lt;/a&gt;原始代码&lt;/h3&gt;&lt;p&gt;没有做过任何优化的满目疮痍的代码。a.js 和 b.js 都有全局变量 window.a ，导致冲突，全局变量属于 window 作用域下的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//a.js
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    //都什么时代了，script标签还写type属性呢？黄牌警告！下次绝逼不写了。
    var a = 123, b = &amp;quot;hello world&amp;quot;;
&amp;lt;/script&amp;gt;

//b.js
&amp;lt;script&amp;gt;
    //看！这把没有写了吧~就是这么任性，上面的那个写了的也绝逼不改！
    var a, c = &amp;quot;abc&amp;quot;;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;使用匿名函数&quot;&gt;&lt;a href=&quot;#使用匿名函数&quot; class=&quot;headerlink&quot; title=&quot;使用匿名函数&quot;&gt;&lt;/a&gt;使用匿名函数&lt;/h3&gt;&lt;p&gt;通过匿名函数改变了a.js 和 b.js 中的变量 a 的作用域，使得他们都不再是全局变量了，但是在 b.js 中无法访问在 a.js 中的变量 a， 换而言之，他们之间没办法通信了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//a.js
(function() {
    var a = 123, b = &amp;quot;hello world&amp;quot;;
})();

//b.js
(function() {
    var a, c = &amp;quot;abc&amp;quot;;
})();
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;使用全局变量进行通信&quot;&gt;&lt;a href=&quot;#使用全局变量进行通信&quot; class=&quot;headerlink&quot; title=&quot;使用全局变量进行通信&quot;&gt;&lt;/a&gt;使用全局变量进行通信&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;var str;
//a.js
(function() {
    var a = 123,
    b = &amp;quot;hello world&amp;quot;;
    window.str = a;
})();

//b.js
(function() {
    var a, c = &amp;quot;abc&amp;quot;;
    alert(window.str);
})();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用 window.str 这种全局全局变量作为通信的媒介其实并不是一个好办法，这样做会导致全局变量越来越多，反而不好维护。&lt;/p&gt;
&lt;h3 id=&quot;使用命名空间&quot;&gt;&lt;a href=&quot;#使用命名空间&quot; class=&quot;headerlink&quot; title=&quot;使用命名空间&quot;&gt;&lt;/a&gt;使用命名空间&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;var GLOBAL = {};
//a.js
(function() {
    var a = 123,
    b = &amp;quot;hello world&amp;quot;;
    GLOBAL.A.a = a;
})();

//b.js
(function() {
    var a, c = &amp;quot;abc&amp;quot;;
    alert(GLOBAL.A.a);
})();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用单一的全局变量 GlOBAL ，匿名空间里需要保存的属性都在全局变量 GLOBAL 的基础上使用命名空间的方式进行拓展。这里给命名空间起名字也需要很讲究，好的命名规则会对团队协同合作有很大的帮助&lt;/p&gt;
&lt;h2 id=&quot;js一些常用的封装&quot;&gt;&lt;a href=&quot;#js一些常用的封装&quot; class=&quot;headerlink&quot; title=&quot;js一些常用的封装&quot;&gt;&lt;/a&gt;js一些常用的封装&lt;/h2&gt;&lt;p&gt;———————-解决兼容性方法———————–  &lt;/p&gt;
&lt;h3 id=&quot;获取元素的计算后样式属性&quot;&gt;&lt;a href=&quot;#获取元素的计算后样式属性&quot; class=&quot;headerlink&quot; title=&quot;获取元素的计算后样式属性&quot;&gt;&lt;/a&gt;获取元素的计算后样式属性&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;function getStyle(element,attr) {
    if (element.currentStyle) {
        return element.currentStyle[attr];
    }else{
        return window.getComputedStyle(element,null){
            return window.getComputedStyle(element,null)[attr];
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;scroll-top-or-scroll-left获取已经滚动到元素的左边界或上边界的像素数&quot;&gt;&lt;a href=&quot;#scroll-top-or-scroll-left获取已经滚动到元素的左边界或上边界的像素数&quot; class=&quot;headerlink&quot; title=&quot;scroll().top or scroll().left获取已经滚动到元素的左边界或上边界的像素数&quot;&gt;&lt;/a&gt;scroll().top or scroll().left获取已经滚动到元素的左边界或上边界的像素数&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;function scroll() {
        return {
            top:window.pageYOffset || document.documentElement.scrollTop || document.body.scrollLeft || 0,
            left:window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0
        };
    }
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;获取可视窗口的大小&quot;&gt;&lt;a href=&quot;#获取可视窗口的大小&quot; class=&quot;headerlink&quot; title=&quot;获取可视窗口的大小&quot;&gt;&lt;/a&gt;获取可视窗口的大小&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;function client() {
    return {
        width:window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth ||0,
        height:window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight || 0
    };
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;event兼容&quot;&gt;&lt;a href=&quot;#event兼容&quot; class=&quot;headerlink&quot; title=&quot;event兼容&quot;&gt;&lt;/a&gt;event兼容&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;//event兼容
var eventCompatible = {
    //event兼容
    getEvent: function(event) {
        return event || window.event;
    },

    //阻止冒泡事件
    stopPropagation: function(event) {
        var event = event || window.event;
        if(event &amp;amp;&amp;amp; event.stopPropagation) {
            return event.stopPropagation();
        } else {
            return event.cancelBubble = true;
        }
    },

    //event.target 事件的目标 (事件委托)
    getTarget: function(event) {
        var event = event || window.event;
        return event.target ? event.target : event.srcElement;
    },

    //鼠标页面坐标
    page: function(event) {
        var event = event || window.event;
        return {
            x: event.pageX || event.clientX + document.documentElement.scrollLeft,
            y: event.pageY || event.clientY + document.documentElement.scrollTop
        };
    },

    //阻止默认行为
    prevent: function(event){
        var event = event || window.event;
        if (event.preventDefault) {
            return event.preventDefault();
        }else{
            return event.returnValue = false;
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;监听事件兼容处理&quot;&gt;&lt;a href=&quot;#监听事件兼容处理&quot; class=&quot;headerlink&quot; title=&quot;监听事件兼容处理&quot;&gt;&lt;/a&gt;监听事件兼容处理&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;function eventListener(obj, type, handler, unbind) {
    if(unbind === true) {
        if(obj.removeEventListener) {
            obj.removeEventListener(type, handler);
        } else {
            obj.detachEvent(&amp;quot;on&amp;quot; + type, handler);
        };
    } else {
        if(obj.addEventListener) {
            obj.addEventListener(type, handler);
        } else {
            obj.attachEvent(&amp;quot;on&amp;quot; + type, handler);
        };
    };
};
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;清楚选择&quot;&gt;&lt;a href=&quot;#清楚选择&quot; class=&quot;headerlink&quot; title=&quot;清楚选择&quot;&gt;&lt;/a&gt;清楚选择&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;function clearSelection() {
    return window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;##——————-自定义的方法—————————&lt;/p&gt;
&lt;h3 id=&quot;trim去掉字符串两端的空格&quot;&gt;&lt;a href=&quot;#trim去掉字符串两端的空格&quot; class=&quot;headerlink&quot; title=&quot;trim去掉字符串两端的空格&quot;&gt;&lt;/a&gt;trim去掉字符串两端的空格&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;function trim(str) {
    return str.replace(/^\s+|\s+$/g, &amp;quot;&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;十进制转其他进制-type类型有”bit”、”oct”、”hex”&quot;&gt;&lt;a href=&quot;#十进制转其他进制-type类型有”bit”、”oct”、”hex”&quot; class=&quot;headerlink&quot; title=&quot;十进制转其他进制 type类型有”bit”、”oct”、”hex”&quot;&gt;&lt;/a&gt;十进制转其他进制 type类型有”bit”、”oct”、”hex”&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;function changeFromDec(type, value) {
    var arr = [&amp;quot;0&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;, &amp;quot;5&amp;quot;, &amp;quot;6&amp;quot;, &amp;quot;7&amp;quot;, &amp;quot;8&amp;quot;, &amp;quot;9&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;D&amp;quot;, &amp;quot;E&amp;quot;, &amp;quot;F&amp;quot;]    
    var scale = 0;
    var sys = &amp;quot;&amp;quot;;
    if(!/^[\d]*$/g.test(value)) {
        return &amp;quot;&amp;quot;;
    }
    if(!value) {
        return &amp;quot;&amp;quot;;
    }
    if(type === &amp;quot;bit&amp;quot;) {
        scale = 2;
    } else if(type === &amp;quot;oct&amp;quot;) {
        scale = 8;
    } else if(type === &amp;quot;hex&amp;quot;) {
        scale = 16;
        while(true) {
            sys = arr[value % 16] + sys;
            value = parseInt(value / 16);
            if(!value) {
                break;
            }
        }
        return sys;
    }
    while(true) {
        sys = value % scale + sys;
        value = parseInt(value / scale);
        if(!value) {
            break;
        }
    }
    return sys;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;二进制、八进制、十六进制转十进制&quot;&gt;&lt;a href=&quot;#二进制、八进制、十六进制转十进制&quot; class=&quot;headerlink&quot; title=&quot;二进制、八进制、十六进制转十进制;&quot;&gt;&lt;/a&gt;二进制、八进制、十六进制转十进制;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;function toDec(type, value) {
    if(typeof value === &amp;quot;number&amp;quot;) value += &amp;quot;&amp;quot;;
    var scale = 0;
    var flag = false;
    if(type === &amp;quot;bit&amp;quot;) {
        flag = /^[01]*$/g.test(value);
        scale = 2;
    } else if(type === &amp;quot;oct&amp;quot;) {
        flag = /^[0-7]*$/g.test(value)
        scale = 8;
    } else if(type === &amp;quot;hex&amp;quot;) {
        flag = /^[0-9a-fA-F]*$/g.test(value)
        scale = 16;
    }
    if(!flag || !value) return;
    var arr = value.split(&amp;quot;&amp;quot;);
    var dec = 0;
    for(var i = 0; i &amp;lt; arr.length; i++) {
        if(isNaN(parseInt(arr[i]))) {
            var charCode = arr[i].charCodeAt(0);
            if(charCode &amp;gt; 64 &amp;amp;&amp;amp; charCode &amp;lt; 71) {
                dec += (charCode - 55) * Math.pow(scale, arr.length - 1 - i)
            } else if(charCode &amp;gt; 96 &amp;amp;&amp;amp; charCode &amp;lt; 103) {
                dec += (charCode - 87) * Math.pow(scale, arr.length - 1 - i)
            }
        } else {
            dec += arr[i] * Math.pow(scale, arr.length - 1 - i);
        }
    }
    return dec;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;转动时钟&quot;&gt;&lt;a href=&quot;#转动时钟&quot; class=&quot;headerlink&quot; title=&quot;转动时钟&quot;&gt;&lt;/a&gt;转动时钟&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;function clock() {
    var d = new Date();
    var ms = d.getMilliseconds();
    var s = d.getSeconds() + ms / 1000;
    var m = d.getMinutes() + s / 60;
    var h = d.getHours() + m / 60;
    second.style.transform = &amp;quot;rotate(&amp;quot; + s * 6 + &amp;quot;deg)&amp;quot;;
    minute.style.transform = &amp;quot;rotate(&amp;quot; + m * 6 + &amp;quot;deg)&amp;quot;;
    hour.style.transform = &amp;quot;rotate(&amp;quot; + h * 30 + &amp;quot;deg)&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;匀速动画&quot;&gt;&lt;a href=&quot;#匀速动画&quot; class=&quot;headerlink&quot; title=&quot;匀速动画&quot;&gt;&lt;/a&gt;匀速动画&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;function animate(obj, attr, distance) {
    var step = 20;
    var leader = parseInt(getStyle(obj, attr)) || 0
    clearInterval(obj.atimer);
    obj.atimer = setInterval(function() {
        distance &amp;gt; leader ? leader += step : leader -= step;
        if(Math.abs(distance - leader) &amp;gt; step) {
            obj.style[attr] = leader + &amp;quot;px&amp;quot;;
        } else {
            obj.style[attr] = distance + &amp;quot;px&amp;quot;;
            clearInterval(obj.atimer);
        }
    }, 15);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;缓动动画-单个数值属性&quot;&gt;&lt;a href=&quot;#缓动动画-单个数值属性&quot; class=&quot;headerlink&quot; title=&quot;缓动动画(单个数值属性)&quot;&gt;&lt;/a&gt;缓动动画(单个数值属性)&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;function slowSpeedAnimate(element, attr, distance) {
    clearInterval(element.timer);
    element.timer = setInterval(function() {
        var removing = parseInt(getStyle(element, attr)) || 0; //element.offsetLeft;
        var step = (distance - removing) / 20;
        step = step &amp;gt; 0 ? Math.ceil(step) : Math.floor(step);
        removing = removing + step;
        element.style[attr] = removing + &amp;quot;px&amp;quot;;
        if(removing == distance) {
            clearInterval(element.timer);
        }
    }, 15)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;缓动动画-多个数值属性&quot;&gt;&lt;a href=&quot;#缓动动画-多个数值属性&quot; class=&quot;headerlink&quot; title=&quot;缓动动画(多个数值属性)&quot;&gt;&lt;/a&gt;缓动动画(多个数值属性)&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;function moreAnimate(element, json, interval, fn) {
    clearInterval(element.timer);
    element.timer = setInterval(function() {
        var flag = true;
        for(var k in json) {
            if(k === &amp;quot;opacity&amp;quot;) {
                var removing = getStyle(element, k) * 100; //element.offsetLeft;
                var distance = json[k] * 100;
                var step = (distance - removing) / interval;
                step = step &amp;gt; 0 ? Math.ceil(step) : Math.floor(step);
                removing = removing + step;
                element.style[k] = removing / 100;
            } else {
                var removing = parseInt(getStyle(element, k)) || 0; //element.offsetLeft;
                var distance = json[k];
                var step = (distance - removing) / interval;
                step = step &amp;gt; 0 ? Math.ceil(step) : Math.floor(step);
                removing = removing + step;
                element.style[k] = removing + &amp;quot;px&amp;quot;;
            }
            if(removing != distance) {
                flag = false;
            }
        }
        if(flag) {
            clearInterval(element.timer);
            if(fn) {
                fn();
            }
        }

    }, 15)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;进度条&quot;&gt;&lt;a href=&quot;#进度条&quot; class=&quot;headerlink&quot; title=&quot;进度条&quot;&gt;&lt;/a&gt;进度条&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;    function Progress(id, width, height, outClass, inClass) {
    this.width = width;
    this.height = height;
    this.color = &amp;quot;#fff&amp;quot;;
    this.progress = document.createElement(&amp;quot;div&amp;quot;);
    this.percentage = document.createElement(&amp;quot;div&amp;quot;);
    this.filler = document.createElement(&amp;quot;div&amp;quot;);
    var element = document.getElementById(id);
    if(width) {
        this.progress.style.width = this.width + &amp;quot;px&amp;quot;;
    } else {
        this.progress.style.width = &amp;quot;200px&amp;quot;;
    }
    if(height) {
        this.progress.style.height = this.height + &amp;quot;px&amp;quot;;
    } else {
        this.progress.style.height = &amp;quot;20px&amp;quot;;
    }
    if(typeof outClass === &amp;quot;string&amp;quot; &amp;amp;&amp;amp; (/^[a-zA-Z](\w|[-])+$/g.test(outClass))) {
        this.progress.className = outClass;
    } else {
        this.progress.style.border = &amp;quot;1px solid #cccccc&amp;quot;;
        this.progress.style.backgroundImage = &amp;quot;linear-gradient(to bottom, #ccc 0%, #fff 40%, #ccc 100%)&amp;quot;;
        this.progress.style.borderRadius = &amp;quot;10px&amp;quot;;
    }
    this.progress.style.overflow = &amp;quot;hidden&amp;quot;;
    this.progress.style.position = &amp;quot;relative&amp;quot;;
    element.appendChild(this.progress);
    //
    this.progress.appendChild(this.percentage);
    this.percentage.style.width = &amp;quot;100%&amp;quot;;
    this.percentage.style.height = &amp;quot;100%&amp;quot;;
    this.percentage.style.textAlign = &amp;quot;center&amp;quot;;
    this.percentage.style.position = &amp;quot;absolute&amp;quot;;
    this.percentage.innerHTML = &amp;quot;0%&amp;quot;;
    //
    this.progress.appendChild(this.filler);
    this.filler.style.height = &amp;quot;100%&amp;quot;;
    this.filler.style.width = 0;
    if(typeof inClass === &amp;quot;string&amp;quot; &amp;amp;&amp;amp; (/^[a-zA-Z](\w|[-])+$/g.test(inClass))) {
        this.filler.className = inClass;
    } else {
        this.filler.style.backgroundColor = &amp;quot;#DC7BBE&amp;quot;;
        this.filler.style.backgroundImage = &amp;quot;linear-gradient(to bottom, #0AF 0%, #0ff 40%, #0AF 100%)&amp;quot;;
    }
}
Progress.prototype.fill = function(value) {
    if(value) {
        this.percentage.innerHTML = value + &amp;quot;%&amp;quot;;
        this.percentage.style.color = this.color;
        value = (this.progress.offsetWidth - 2) / 100 * value;
        this.filler.style.width = value + &amp;quot;px&amp;quot;;
    } else {
        this.filler.style.width = 0;
        this.percentage.innerHTML = &amp;quot;0%&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;ajax封装&quot;&gt;&lt;a href=&quot;#ajax封装&quot; class=&quot;headerlink&quot; title=&quot;ajax封装&quot;&gt;&lt;/a&gt;ajax封装&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;function ajax(a, b) { 
    //type, url, async, dataType, data, fn
    var xhr = null,
        type = &amp;quot;get&amp;quot;,
        url = &amp;quot;#&amp;quot;,
        async = true,
        dataType = &amp;quot;text&amp;quot;,
        data = &amp;quot;&amp;quot;,
        jsonp = &amp;quot;&amp;quot;,
        jsonpCallback = &amp;quot;&amp;quot;,
        methodName = &amp;quot;&amp;quot;,
        c = null;
    if(typeof a === &amp;quot;string&amp;quot;) {
        url = a;
    }
    if(typeof a === &amp;quot;object&amp;quot;) {
        c = a;
    } else if(typeof b == &amp;quot;object&amp;quot;) {
        c = b;
    }
    if(c) {
        if(c.type &amp;amp;&amp;amp; typeof c.type === &amp;quot;string&amp;quot;) {
            type = c.type;
        };
        if(c.url &amp;amp;&amp;amp; typeof c.url === &amp;quot;string&amp;quot;) {
            url = c.url;
        };
        if(c.async &amp;amp;&amp;amp; typeof c.async === &amp;quot;boolean&amp;quot;) {
            async = c.async;
        };
        if(c.dataType &amp;amp;&amp;amp; typeof c.dataType === &amp;quot;string&amp;quot;) {
            dataType = c.dataType;
        };
        if(c.data &amp;amp;&amp;amp; typeof c.data === &amp;quot;object&amp;quot;) {
            var arr = [];
            for(k in c.data) {
                arr.push(k + &amp;quot;=&amp;quot; + c.data[k]);
            }
            data = arr.join(&amp;quot;&amp;amp;&amp;quot;);
        };
        if(c.jsonp &amp;amp;&amp;amp; typeof c.jsonp === &amp;quot;string&amp;quot;) {
            if(!c.dataType) {
                dataType = &amp;quot;jsonp&amp;quot;;
            }
            jsonp = c.jsonp;
            if(data) {
                data += &amp;quot;&amp;amp;&amp;quot;;
            }
        } else {
            jsonp = &amp;quot;callback&amp;quot;;
        }
        if(c.jsonpCallback &amp;amp;&amp;amp; typeof c.jsonpCallback === &amp;quot;string&amp;quot;) {
            methodName = c.jsonpCallback;
        } else {
            methodName = &amp;quot;jquery&amp;quot; + new Date().getTime() + &amp;quot;_&amp;quot; + (Math.random() + &amp;quot;&amp;quot;).substr(2);
        }
    };
    if(dataType == &amp;quot;jsonp&amp;quot;) {
        data += jsonp + &amp;quot;=&amp;quot; + methodName;
        window[methodName] = function(data) {
            c.success(data);
        }
        var script = document.createElement(&amp;quot;script&amp;quot;);
        script.src = url + &amp;quot;?&amp;quot; + data;
        var head = document.getElementsByTagName(&amp;quot;head&amp;quot;)[0];
        head.appendChild(script);
    } else {
        //ajax部分
        if(window.XMLHttpRequest) {
            xhr = new XMLHttpRequest();
        } else {
            xhr = ActiveXObject(&amp;quot;Microsoft.XMLHTTP&amp;quot;);
        }
        if(type == &amp;quot;get&amp;quot;) {
            if(data) {
                url += encodeURI(&amp;quot;?&amp;quot; + data);
            }
            data = null;
        };
        xhr.open(type, url, async);
        if(type == &amp;quot;post&amp;quot;) {
            xhr.setRequestHeader(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/x-www-form-urlencoded&amp;quot;);
        };
        xhr.send(data);
        xhr.onreadystatechange = function() {
            if(xhr.readyState == 4 &amp;amp;&amp;amp; xhr.status == 200) {
                var obj = {
                    text: xhr.responseText,
                    json: JSON.parse(xhr.responseText),
                };
                var data = obj[dataType];
                if(typeof c.success === &amp;quot;function&amp;quot;) {
                    c.success(data);
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;millisec是距离-GMT-时间-1970-年-1-月-1-日午夜的毫秒数-解析通过ajax返回的数据中的毫秒数值的日期&quot;&gt;&lt;a href=&quot;#millisec是距离-GMT-时间-1970-年-1-月-1-日午夜的毫秒数-解析通过ajax返回的数据中的毫秒数值的日期&quot; class=&quot;headerlink&quot; title=&quot;millisec是距离 GMT 时间 1970 年 1 月 1 日午夜的毫秒数 (解析通过ajax返回的数据中的毫秒数值的日期)&quot;&gt;&lt;/a&gt;millisec是距离 GMT 时间 1970 年 1 月 1 日午夜的毫秒数 (解析通过ajax返回的数据中的毫秒数值的日期)&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;function getFullDate(millisec, lang) {
    var data = new Date();
    data.setTime(millisec);
    var year = data.getFullYear(),
        month = data.getMonth(),
        day = data.getDate(),
        week = data.getDay(),
        hour = data.getHours(),
        minute = data.getMinutes(),
        second = data.getSeconds(),
        am = &amp;quot;am&amp;quot;,
        pm = &amp;quot;pm&amp;quot;,
        enWeek = [&amp;quot;Sunday&amp;quot;, &amp;quot;Monday&amp;quot;, &amp;quot;Tuesday&amp;quot;, &amp;quot;Wednesday&amp;quot;, &amp;quot;Thursday&amp;quot;, &amp;quot;Friday&amp;quot;, &amp;quot;Saturday&amp;quot;],
        cnWeek = [&amp;quot;星期天&amp;quot;, &amp;quot;星期一&amp;quot;, &amp;quot;星期二&amp;quot;, &amp;quot;星期三&amp;quot;, &amp;quot;星期四&amp;quot;, &amp;quot;星期五&amp;quot;, &amp;quot;星期六&amp;quot;],
        enMonth = [&amp;quot;January&amp;quot;, &amp;quot;February&amp;quot;, &amp;quot;March&amp;quot;, &amp;quot;April&amp;quot;, &amp;quot;May&amp;quot;, &amp;quot;June&amp;quot;, &amp;quot;July&amp;quot;, &amp;quot;August&amp;quot;, &amp;quot;September&amp;quot;, &amp;quot;October&amp;quot;, &amp;quot;November&amp;quot;, &amp;quot;December&amp;quot;],
        cnMonth = [&amp;quot;一月&amp;quot;, &amp;quot;二月&amp;quot;, &amp;quot;三月&amp;quot;, &amp;quot;四月&amp;quot;, &amp;quot;五月&amp;quot;, &amp;quot;六月&amp;quot;, &amp;quot;七月&amp;quot;, &amp;quot;八月&amp;quot;, &amp;quot;九月&amp;quot;, &amp;quot;十月&amp;quot;, &amp;quot;十一月&amp;quot;, &amp;quot;十二月&amp;quot;],
        cnDay = [&amp;quot;廿&amp;quot;, &amp;quot;一&amp;quot;, &amp;quot;二&amp;quot;, &amp;quot;三&amp;quot;, &amp;quot;四&amp;quot;, &amp;quot;五&amp;quot;, &amp;quot;六&amp;quot;, &amp;quot;七&amp;quot;, &amp;quot;八&amp;quot;, &amp;quot;九&amp;quot;, &amp;quot;十&amp;quot;]    if(lang == &amp;quot;cn&amp;quot;) {
        am = &amp;quot;上午&amp;quot;;
        pm = &amp;quot;下午&amp;quot;;
    };
    day = day &amp;lt; 10 ? &amp;quot;0&amp;quot; + day : day;
    var obj = {
        year: year,
        month: lang ? (lang == &amp;quot;cn&amp;quot; ? cnMonth[month] : enMonth[month]) : (month &amp;lt; 10 ? &amp;quot;0&amp;quot; + (month + 1) : (month + 1)),
        day: day,
        week: lang == &amp;quot;en&amp;quot; ? enWeek[week] : cnWeek[week],
        hour: hour &amp;lt; 10 ? &amp;quot;0&amp;quot; + hour : hour,
        minute: minute &amp;lt; 10 ? &amp;quot;0&amp;quot; + minute : minute,
        second: second &amp;lt; 10 ? &amp;quot;0&amp;quot; + second : second,
        ms: data.getMilliseconds(),
        am: am,
        pm: pm,
        Hour: hour + minute / 60 &amp;gt; 12 ? (hour == 12 ? pm + hour : pm + hour % 12) : am + hour,
    };
    return obj;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;右键菜单&quot;&gt;&lt;a href=&quot;#右键菜单&quot; class=&quot;headerlink&quot; title=&quot;右键菜单&quot;&gt;&lt;/a&gt;右键菜单&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;function RightMenu(area) {
    this.area = area;
    this.menu = null;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;根据传入的值获取目标&quot;&gt;&lt;a href=&quot;#根据传入的值获取目标&quot; class=&quot;headerlink&quot; title=&quot;根据传入的值获取目标&quot;&gt;&lt;/a&gt;根据传入的值获取目标&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;RightMenu.prototype.target = function(area) {
    if(typeof area === &amp;quot;string&amp;quot;) {
        return document.getElementById(area);
    } else if(typeof area === &amp;quot;object&amp;quot;) {
        return area;
    }
}

RightMenu.prototype.init = function(data,defaultStyle, userStyle, hoverStyle) {
    this.createMenu(data, defaultStyle, userStyle, hoverStyle);
    this.showMenu();
}

RightMenu.prototype.createMenu = function(data, defaultStyle, userStyle, hoverStyle) {
    if(typeof defaultStyle == &amp;quot;string&amp;quot; &amp;amp;&amp;amp; !defaultStyle) {
        hoverStyle = userStyle;
        userStyle = defaultStyle;
        defaultStyle = true;
    }
    //创建菜单及样式
    this.menu = document.createElement(&amp;quot;ul&amp;quot;);
    this.menu.style.position = &amp;quot;absolute&amp;quot;;
    this.menu.style.margin = 0;
    this.menu.style.padding = &amp;quot;2px&amp;quot;;
    this.menu.style.listStyle = &amp;quot;none&amp;quot;;
    this.menu.style.display = &amp;quot;none&amp;quot;;
    if(!defaultStyle) {
        this.menu.style.border = &amp;quot;1px solid #DDDDDD&amp;quot;;
        this.menu.style.backgroundColor = &amp;quot;#CCCCCC&amp;quot;;
        this.menu.style.boxShadow = &amp;quot;5px 5px 5px #ccc&amp;quot;;
    } else {
        this.menu.className = userStyle;
    }
    //选中项样式
    var hover = document.createElement(&amp;quot;span&amp;quot;);
    hover.style.display = &amp;quot;block&amp;quot;;
    hover.style.position = &amp;quot;absolute&amp;quot;
    hover.style.top = 0;
    hover.style.left = 0;
    hover.style.boxSizing = &amp;quot;border-box&amp;quot;;
    hover.style.width = &amp;quot;100%&amp;quot;;
    hover.style.height = &amp;quot;100%&amp;quot;;
    if((!defaultStyle) || (defaultStyle &amp;amp;&amp;amp; !hoverStyle)) {
        hover.style.border = &amp;quot;1px solid #aaa&amp;quot;;
        hover.style.borderRadius = &amp;quot;5px&amp;quot;;
        hover.style.backgroundImage = &amp;quot;linear-gradient(to bottom,rgba(255,255,255,0.5)0%,rgba(255,255,255,0.1)50%,rgba(255,255,255,0.1)100%)&amp;quot;;

    } else {
        hover.className = hoverStyle;
    }
    //创建菜单项
    for(var item in data) {
        var li = document.createElement(&amp;quot;li&amp;quot;);
        li.style.position = &amp;quot;relative&amp;quot;;
        li.style.padding = &amp;quot;5px 10px&amp;quot;;
        li.style.cursor = &amp;quot;pointer&amp;quot;;
        //绑定事件
        li.addEventListener(&amp;quot;mouseenter&amp;quot;, function() {
            this.appendChild(hover);
        });
        li.addEventListener(&amp;quot;mouseleave&amp;quot;, function() {
            this.removeChild(hover);
        });
        var itemData = data[item]        for(var obj in itemData) {
            if(typeof itemData[obj] === &amp;quot;string&amp;quot;) {
                li.innerHTML = itemData[obj];
            } else if(typeof itemData[obj] === &amp;quot;object&amp;quot;) {
                var handlerData = itemData[obj];
                for(var type in handlerData) {
                    li.addEventListener(type, handlerData[type]);
                }
            }
        }
        this.menu.appendChild(li);
    }
    this.target(this.area).appendChild(this.menu);
}

RightMenu.prototype.showMenu = function() {
    var that = this;
    this.menu.parentNode.oncontextmenu = function(ev) {
        that.menu.style.display = &amp;quot;block&amp;quot;;
        that.menu.style.left = ev.pageX + &amp;quot;px&amp;quot;;
        that.menu.style.top = ev.pageY + &amp;quot;px&amp;quot;;
        if(that.menu.parentNode.offsetWidth &amp;lt; that.menu.offsetLeft + that.menu.offsetWidth) {
            that.menu.style.left = ev.pageX - that.menu.offsetWidth + &amp;quot;px&amp;quot;;
        };
        if(that.menu.parentNode.offsetHeight &amp;lt; that.menu.offsetTop + that.menu.offsetHeight) {
            that.menu.style.top = ev.pageY - that.menu.offsetHeight + &amp;quot;px&amp;quot;;
        };
        return false;
    }
    this.menu.parentNode.onclick = function() {
        that.menu.style.display = &amp;quot;none&amp;quot;;
    }
    document.onkeydown = function(e) {
        if(e.keyCode == 18 || e.keyCode == 27) {
            that.menu.style.display = &amp;quot;none&amp;quot;;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;拖拽&quot;&gt;&lt;a href=&quot;#拖拽&quot; class=&quot;headerlink&quot; title=&quot;拖拽&quot;&gt;&lt;/a&gt;拖拽&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;function Drag(target, area) {
    this.target = target;
    this.area = area;
}

//根据传入的值获取目标
Drag.prototype.dragTarget = function(target) {
    if(typeof target === &amp;quot;string&amp;quot;) {
        return document.getElementById(target);
    } else if(typeof target === &amp;quot;object&amp;quot;) {
        return target;
    }
}

Drag.prototype.init = function() {
    this.target = this.dragTarget(this.target);
    this.target.style.position = &amp;quot;absolute&amp;quot;;
    this.target.setAttribute(&amp;quot;draggable&amp;quot;,&amp;quot;true&amp;quot;);
    this.dragEvent();
}

Drag.prototype.dragEvent = function() {
    var that = this;
    this.target.onmousedown = function(e) {
        e = e || window.event;
        that.disX = e.clientX - that.target.offsetLeft;
        that.disY = e.clientY - that.target.offsetTop;
        document.onmousemove = function(e) {
            that.moveEvent(e);
        }
        document.onmouseup = function(){
            that.target.style.opacity = &amp;quot;1&amp;quot;;
            document.onmousemove = document.onmouseup = null;
        }
        return false;
    }
}
Drag.prototype.moveEvent = function(e) {
    var limitX = e.clientX - this.disX;
    var limitY = e.clientY - this.disY;
    //没有指定区域则用document

    if (!this.area) {
        this.area = document.documentElement;
    }
    if(limitX &amp;lt; this.area.offsetLeft) {
        limitX = this.area.offsetLeft;
    } else if(limitX &amp;gt; this.area.clientWidth + this.area.offsetLeft - this.target.offsetWidth) {
        limitX =  this.area.clientWidth + this.area.offsetLeft - this.target.offsetWidth;
    }
    if(limitY &amp;lt; this.area.offsetTop) {
        limitY = this.area.offsetTop;
    } else if(limitY &amp;gt; this.area.clientHeight + this.area.offsetTop - this.target.offsetHeight) {
        limitY = this.area.clientHeight + this.area.offsetTop - this.target.offsetHeight;
    }
    this.target.style.left = limitX + &amp;quot;px&amp;quot;;
    this.target.style.top = limitY + &amp;quot;px&amp;quot;;
    this.target.style.opacity = &amp;quot;0.8&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原则&quot;&gt;&lt;a href=&quot;#原则&quot; class=&quot;headerlink&quot; title=&quot;原则&quot;&gt;&lt;/a&gt;原则&lt;/h2&gt;&lt;p&gt;1.用匿名函数将脚本包起来；&lt;/p&gt;
&lt;p&gt;2.使用多级命名空间。&lt;/p&gt;
&lt;p&gt;这第二条“使用多级命名空间”这个，我觉得并不是很完美的好主意。因为如果级数太多的话会造成变量名字变得长的一逼。&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://www.shenzjd.cn/categories/js/"/>
    
    
      <category term="js" scheme="http://www.shenzjd.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>seo优优化</title>
    <link href="http://www.shenzjd.cn/2016/01/24/seo%E4%BC%98%E4%BC%98%E5%8C%96/"/>
    <id>http://www.shenzjd.cn/2016/01/24/seo优优化/</id>
    <published>2016-01-24T13:56:49.000Z</published>
    <updated>2016-07-24T14:03:52.000Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章其实是我本人的总结，因为工作中做完了一个官方网站并成功上线，最后组长检查代码看到我的keyword等一系列信息都是空的，把我骂得狗血淋头。一言不合就作总结，总结一些简单但是我们能做的seo小技巧，送给想把网站做到极致的人。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SEO要点：&lt;br&gt;1.语义化html标签，用合适的标签嵌套合适的内容，不可过分依赖div，对浏览器更友善就能更容易被抓取。&lt;/p&gt;
&lt;p&gt;2.重要的内容html代码放在前面，放在左边。搜索引擎爬虫是从左往右，从上到下进行抓取的，利用布局来实现重要的代码在上面&lt;/p&gt;
&lt;p&gt;3.重要内容要写在html架构里面，蜘蛛不会抓取js的内容，&lt;/p&gt;
&lt;p&gt;4.尽量减少使用iframe，因为蜘蛛不会抓取iframe的内容。&lt;/p&gt;
&lt;p&gt;5.为图片img加上alt属性，加了alt就不必加title了，避免搜索引擎认为我们恶意优化。alt能让图片没加载时都能有文字提示。&lt;/p&gt;
&lt;p&gt;6.需要强调的地方加上title，本页面内跳转a标签内也要加title。&lt;/p&gt;
&lt;p&gt;7.重要的地方可以保留文字，有些地方必须用图，但是蜘蛛不会爬img，这时应该设置文本，再用缩进隐藏的方法去掉文字，例如logo的优化就是这样做的。注意隐藏不能用display：none，蜘蛛不会检索display：none的内容，应用这个方法的标签一般是logo，标题等重要信息&lt;/p&gt;
&lt;p&gt;8.尽量做到js、css、html的分离，不要在html中写样式代码。&lt;/p&gt;
&lt;p&gt;9.注释的东西能去掉应该去掉，对搜索引擎更加友好&lt;/p&gt;
&lt;p&gt;10.css放在头部，js放在尾部，尽量使用外链或者工具对css和js进行压缩&lt;/p&gt;
&lt;p&gt;11.减少http的请求，使页面更快加载。&lt;/p&gt;
&lt;p&gt;12.使用本地缓存更快地访问网站，使用cdn网络，加快用户访问速度。&lt;/p&gt;
&lt;p&gt;13.使用G-ZIP压缩，浏览速度更快，搜索引擎抓取信息量更大&lt;/p&gt;
&lt;p&gt;关键一点是头部的title，description，keyword的设置。&lt;/p&gt;
&lt;p&gt;1.title设置不宜过长，要简短，网站的名字与相关的小内容，一般为10-20个字。不能重复&lt;/p&gt;
&lt;p&gt;2.keywords设置10个关键词，没个词不能太长，简短且符合你网站的特点，不能重复&lt;/p&gt;
&lt;p&gt;3.description，50个字内描述你的网站&lt;/p&gt;
&lt;p&gt;description写原创的话，并包含2-3个关键词比较好&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章其实是我本人的总结，因为工作中做完了一个官方网站并成功上线，最后组长检查代码看到我的keyword等一系列信息都是空的，把我骂得狗血淋头。一言不合就作总结，总结一些简单但是我们能做的seo小技巧，送给想把网站做到极致的人。&lt;br&gt;
    
    </summary>
    
      <category term="前端总结" scheme="http://www.shenzjd.cn/categories/%E5%89%8D%E7%AB%AF%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>MarkDown语法小记</title>
    <link href="http://www.shenzjd.cn/2015/07/14/MarkDown%E8%AF%AD%E6%B3%95%E5%B0%8F%E8%AE%B0/"/>
    <id>http://www.shenzjd.cn/2015/07/14/MarkDown语法小记/</id>
    <published>2015-07-14T11:53:22.000Z</published>
    <updated>2016-07-14T12:14:12.000Z</updated>
    
    <content type="html">&lt;p&gt;刚开始不介绍下作者，内心都说不过去啊，那我就百度科普下。&lt;/p&gt;
&lt;h2 id=&quot;什么是-Markdown？&quot;&gt;&lt;a href=&quot;#什么是-Markdown？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Markdown？&quot;&gt;&lt;/a&gt;什么是 Markdown？&lt;/h2&gt;&lt;p&gt;Markdown 最初是由 John Gruber 和 Aaron Swartz 于 2004 年共同设计的（在这里插一句，Aaron Swartz 是一个富有传奇性的人物，绝对值得大家了解一下。他曾经利用麻省理工学院网络，伪造身份，侵入收费不菲的 JSTOR 论文数据库，总共下载480万篇论文，以供公众免费下载，他也因此被联邦政府起诉逮捕。他于 2013 年自杀，年仅 27 岁）。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;它是一种用来标记文字的语法，这种语法十分简单，十分钟左右的时间就可以完全掌握。只要使用少量的几个特殊字符（常用的有「#」和「*」）就可以完成一些加粗、斜体、引用等排版工作，因其易学性和便捷性而受到越来越多人的欢迎。使用 Markdown 进行排版可以大大地节省你在排版中所花费的时间，让你更加专注于写作。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h1 id=&quot;Markdown-基本语法&quot;&gt;&lt;a href=&quot;#Markdown-基本语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown 基本语法&quot;&gt;&lt;/a&gt;Markdown 基本语法&lt;/h1&gt;&lt;h2 id=&quot;1-设置标题&quot;&gt;&lt;a href=&quot;#1-设置标题&quot; class=&quot;headerlink&quot; title=&quot;1. 设置标题&quot;&gt;&lt;/a&gt;1. 设置标题&lt;/h2&gt;&lt;p&gt;Markdown 最多支持六个级别的标题设置，设置标题也十分简单，只要在在每一行的开始使用井号「#」就可以创建标题，「#」的数量决定了标题的级别。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 我是小美

## 我是小小美

### 我是小小小美
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;2-斜体&quot;&gt;&lt;a href=&quot;#2-斜体&quot; class=&quot;headerlink&quot; title=&quot;2. 斜体&quot;&gt;&lt;/a&gt;2. 斜体&lt;/h2&gt;&lt;p&gt;在想要变斜体的文本两旁各加一个星号「*」就可以将该文本变为斜体了。例如：&lt;/p&gt;
&lt;p&gt;你们知道没有喝脉动的小美长什么样子么？&lt;/p&gt;
&lt;p&gt;长这样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*小美*
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;3-加粗&quot;&gt;&lt;a href=&quot;#3-加粗&quot; class=&quot;headerlink&quot; title=&quot;3.加粗&quot;&gt;&lt;/a&gt;3.加粗&lt;/h2&gt;&lt;p&gt;在想要加粗的文本两旁各加两个星号「**」就可以将该文本加粗了。例如：&lt;/p&gt;
&lt;p&gt;你们知道成天吃肉的小美长什么样子么？&lt;/p&gt;
&lt;p&gt;长这样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**小美**
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你又想加粗这个文本又想把这个文本变斜体的话，在该文本的两旁各加三个星号「&lt;em&gt;*&lt;/em&gt;」就可以了。比如说：&lt;/p&gt;
&lt;p&gt;你们知道没有喝脉动又成天吃肉的小美长什么样子么？&lt;/p&gt;
&lt;p&gt;长这样：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;***小美***
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;4-引用&quot;&gt;&lt;a href=&quot;#4-引用&quot; class=&quot;headerlink&quot; title=&quot;4.引用&quot;&gt;&lt;/a&gt;4.引用&lt;/h2&gt;&lt;p&gt;如果想要显示出别人说的话或者是引用其他人的观点的话，只需要在这段话的开头加一个大于号「&amp;gt;」即可。例如：&lt;/p&gt;
&lt;p&gt;有一天，小最对正在疯狂减肥的小美说：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; 你快别减肥了，肉没减下来多少，胸倒是快减没了。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果说想要在引用内再次引用的话，只需要敲下回车然后加两个大于号「&amp;gt;&amp;gt;」就好了，如果想要在引用内的引用继续引用的话（喘口气先）那就加三个大于号「&amp;gt;&amp;gt;&amp;gt;」。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;有一天小美睡不着，她就缠着小最给她讲故事，于是小最就给她讲了一个故事：

&amp;gt; 很久以前有只小美睡不着，要小最给她讲故事，小最就给她讲了下面这个故事：

&amp;gt;&amp;gt; 很久以前有只小美睡不着，要小最给她讲故事，小最就给她讲了下面这个故事：

&amp;gt;&amp;gt;&amp;gt; ……
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;有一天小美睡不着，她就缠着小最给她讲故事，于是小最就给她讲了一个故事：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;很久以前有只小美睡不着，要小最给她讲故事，小最就给她讲了下面这个故事：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;很久以前有只小美睡不着，要小最给她讲故事，小最就给她讲了下面这个故事：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;5-列表&quot;&gt;&lt;a href=&quot;#5-列表&quot; class=&quot;headerlink&quot; title=&quot;5.列表&quot;&gt;&lt;/a&gt;5.列表&lt;/h2&gt;&lt;p&gt;Markdown 支持无序列表和有序列表两种列表。无序列表只需要在列表项加一个减号「-」就可以了。此外，加一个星号「*」或者是一个加号「+」也会有同样的效果。建立有序列表也很简单，一个数字加一个英文句号「.」就可以搞定。如果你想在一个列表项中下设一个子列表的话，我建议大家在子列表前加两个空格，更有区分度。下面就给大家举个栗子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**本周小最要干的事情**

- 继续赚好多钱给小美花！

- 和小美一起去看 Zootopia！

- 超市大采购！

1. 搓衣板

2. 一箱，不，两箱袋装泡面

3. 遥控器

4. 护膝/哭/

- 给小美洗外套洗衬衫洗睡衣洗裙子洗毛衣洗内裤洗袜子……
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;显示效果如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本周小最要干的事情&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;继续赚好多钱给小美花！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;和小美一起去看 Zootopia！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;超市大采购！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;搓衣板&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一箱，不，两箱袋装泡面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遥控器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;护膝/哭/&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;给小美洗外套洗衬衫洗睡衣洗裙子洗毛衣洗内裤洗袜子……&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;刚开始不介绍下作者，内心都说不过去啊，那我就百度科普下。&lt;/p&gt;
&lt;h2 id=&quot;什么是-Markdown？&quot;&gt;&lt;a href=&quot;#什么是-Markdown？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Markdown？&quot;&gt;&lt;/a&gt;什么是 Markdown？&lt;/h2&gt;&lt;p&gt;Markdown 最初是由 John Gruber 和 Aaron Swartz 于 2004 年共同设计的（在这里插一句，Aaron Swartz 是一个富有传奇性的人物，绝对值得大家了解一下。他曾经利用麻省理工学院网络，伪造身份，侵入收费不菲的 JSTOR 论文数据库，总共下载480万篇论文，以供公众免费下载，他也因此被联邦政府起诉逮捕。他于 2013 年自杀，年仅 27 岁）。
    
    </summary>
    
    
      <category term="MarkDown" scheme="http://www.shenzjd.cn/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客填坑记</title>
    <link href="http://www.shenzjd.cn/2015/03/06/Hexo%E5%8D%9A%E5%AE%A2%E5%A1%AB%E5%9D%91%E8%AE%B0/"/>
    <id>http://www.shenzjd.cn/2015/03/06/Hexo博客填坑记/</id>
    <published>2015-03-06T13:59:34.000Z</published>
    <updated>2016-07-14T12:14:00.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;　　博客搭建的流程这里就不多说了，都是各种填坑吧，网上的教程数不胜数，但是都是千篇一律，这里主要写下我自己的填坑过程吧。&lt;br&gt;ps：本人不是文科生，也不是什么作家，写作水平有限，就是简单的当个日记，记录下曾经填过的坑！&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;hexo在hexo上面的托管&quot;&gt;&lt;a href=&quot;#hexo在hexo上面的托管&quot; class=&quot;headerlink&quot; title=&quot;hexo在hexo上面的托管&quot;&gt;&lt;/a&gt;hexo在hexo上面的托管&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;　　刚开始在本地搭建博客之后，是直接托管到hexo上面的，但是由于博客多了在github上面的文件越来越多，不便于管理，所以要在创建一个分支，专门用来托管hexo的配置文件，这样就算是换了电脑，也可以进行clone操作，直接操作我们的博客了。  &lt;/p&gt;
&lt;p&gt;　　Hexo部署到GitHub上的文件，是.md（你的博文）转化之后的.html（静态网页）。因此，当你重装电脑或者想在不同电脑上修改博客时，就不可能了（除非你自己写html o(^▽^)o ）。&lt;br&gt;其实，Hexo生成的网站文件中有.gitignore文件，因此它的本意也是想我们将Hexo生成的网站文件存放到GitHub上进行管理的。这样，不仅解决了上述的问题，还可以通过git的版本控制追踪你的博文的修改过程，是极赞的。　　　　　&lt;br&gt;但是，如果每一个GitHub Pages都需要创建一个额外的仓库来存放Hexo网站文件，我感觉很麻烦。&lt;br&gt;所以，我利用了分支！！！&lt;br&gt;简单地说，每个想建立GitHub Pages的仓库，起码有两个分支，一个用来存放Hexo网站的文件，一个用来发布网站。&lt;br&gt;下面以我的博客作为例子详细地讲述。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;我的博客搭建流程&quot;&gt;&lt;a href=&quot;#我的博客搭建流程&quot; class=&quot;headerlink&quot; title=&quot;我的博客搭建流程&quot;&gt;&lt;/a&gt;我的博客搭建流程&lt;/h2&gt;&lt;h4 id=&quot;本地搭建流程&quot;&gt;&lt;a href=&quot;#本地搭建流程&quot; class=&quot;headerlink&quot; title=&quot;本地搭建流程&quot;&gt;&lt;/a&gt;本地搭建流程&lt;/h4&gt;&lt;p&gt;首先确定你的电脑上安装了Node.js和git，然后用npm进行安装hexo&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install -g hexo-cli
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下面就是建站了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hexo init
$ npm install
$ hexo generate
$ hexo server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在打开本地的localhost:4000就可以看到hexo的界面了。&lt;/p&gt;
&lt;h4 id=&quot;github网站流程&quot;&gt;&lt;a href=&quot;#github网站流程&quot; class=&quot;headerlink&quot; title=&quot;github网站流程&quot;&gt;&lt;/a&gt;github网站流程&lt;/h4&gt;&lt;p&gt;1,创建仓库，wu529778790.github.io；&lt;br&gt;2,创建两个分支：master 与 hexo；&lt;br&gt;3,设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；&lt;br&gt;4,使用git clone git@github.com:wu529778790/wu529778790.github.io.git拷贝仓库；&lt;br&gt;5,在本地wu529778790.github.io文件夹下通过Git bash依次执行npm install hexo、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）;&lt;br&gt;6,修改_config.yml中的deploy参数，分支应为master；&lt;br&gt;7,依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件；&lt;br&gt;8,执行hexo generate -d生成网站并部署到GitHub上。&lt;br&gt;9,这样一来，在GitHub上的wu529778790.github.io仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美( •̀ ω •́ )y！&lt;/p&gt;
&lt;h3 id=&quot;填坑记录&quot;&gt;&lt;a href=&quot;#填坑记录&quot; class=&quot;headerlink&quot; title=&quot;填坑记录&quot;&gt;&lt;/a&gt;填坑记录&lt;/h3&gt;&lt;p&gt;首先是没有安装git部署的插件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install hexo-deployer-git --save
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后执行下面的指令即可完成部署&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hexo generate
$ hexo deploy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后要说的是git提交的时候遇见的问题了，不得不总结一下，这次的坑太大，当天应是没解决。提交hexo分支到github上的时候一直报错，百度了各种解决办法还是不行，按照下面的办法终于实现了把配置上传到hexo分支，而自己的文章页面在master分支。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote add origin git@github.com:wu529778790/wu529778790.github.io.git
git add *
git push origin hexo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;好了，此次博客就更新到这吧，感觉也没人可以看懂吧，就是我自己的笔记，啥时候忘了自己来看看，O(∩_∩)O哈哈~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;　　博客搭建的流程这里就不多说了，都是各种填坑吧，网上的教程数不胜数，但是都是千篇一律，这里主要写下我自己的填坑过程吧。&lt;br&gt;ps：本人不是文科生，也不是什么作家，写作水平有限，就是简单的当个日记，记录下曾经填过的坑！&lt;br&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://www.shenzjd.cn/tags/hexo/"/>
    
  </entry>
  
</feed>
