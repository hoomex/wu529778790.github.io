{"meta":{"title":"神族九帝","subtitle":"永不言弃","description":"人生就像愤怒的小鸟，当你失意的时候总有几只猪在笑！","author":"wu529778790","url":"http://www.shenzjd.cn"},"pages":[{"title":"search","date":"2016-07-03T13:22:21.246Z","updated":"2016-07-03T13:22:21.246Z","comments":true,"path":"search/index.html","permalink":"http://www.shenzjd.cn/search/index.html","excerpt":"","text":""},{"title":"categories","date":"2016-07-02T13:21:46.460Z","updated":"2016-07-02T13:21:46.460Z","comments":true,"path":"categories/index.html","permalink":"http://www.shenzjd.cn/categories/index.html","excerpt":"","text":""},{"title":"","date":"2016-07-06T14:46:32.899Z","updated":"2016-07-06T12:14:42.629Z","comments":true,"path":"shows/index.html","permalink":"http://www.shenzjd.cn/shows/index.html","excerpt":"","text":"精灵动画 body{ background-color: #00796B; } @-webkit-keyframes run{ 0%{background-position: 0 0;} 100%{background-position: -1024px 0;} } .sc{ width: 64px; height: 64px; background: url(180635gec1lltkgedqr1qi.png) 0 0 no-repeat; -webkit-animation: run 2s steps(16) infinite; }"},{"title":"","date":"2016-07-06T12:41:41.660Z","updated":"2016-07-06T12:41:41.660Z","comments":false,"path":"tags/index.html","permalink":"http://www.shenzjd.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"angularjs","slug":"angularjs","date":"2016-01-06T10:22:39.000Z","updated":"2016-07-07T11:46:50.523Z","comments":true,"path":"2016/01/06/angularjs/","link":"","permalink":"http://www.shenzjd.cn/2016/01/06/angularjs/","excerpt":"jQuery：用更少的代码，实现更强悍的功能托互联网日新月异发展的福，浏览器变成了人们接入互联网的入口，而JavaScript 这个曾经的小语种，终于成功地站到了舞台的中央，唤起了开发者的兴趣。浏览器里原生的JavaScript有点像汇编语言，不同的浏览器就像不同的CPU架构， 汇编语言各有千秋，这让前端开发者很恼火。聪明人很快发现了这个痛点，于是， 抹平浏览器差异的jQuery库出现了。jQuery由一小撮对浏览器极其熟稔的极客负责抹平不同浏览器的差异，其他开发 者只需要基于jQuery进行开发，可以更好地关注业务实现，而不是把时间花在 适配不同的浏览器上。这样的分工符合经济学原理，开启了一个不可忽视的jQuery时代 满眼的全是DOMjQuery使得开发无刷新动态页面（AJAX）或者单页应用（SPA）变得 相当简单。标准的HTML页面是静态的，被浏览器渲染后就产生了一个DOM树：jQuery让静态的文档动起来，通过提供一系列的选择符，jQuery使开发者能够 极其方便地选中一组DOM节点，对其进行操作。这就是jQuery的开发范式。jQuery没有引入什么新的概念，只是朴素地，让你能够更简单 地、低成本地操作DOM：1.用选择符选定一组DOM节点2.操作选中的DOM节点，比如：修改文本、改变属性、挂接事件监听函数、变换DOM等等。3.基本不用考虑跨浏览器的兼容性 jQuery的API符合大多数开发者的预期，因此，很容易上手。 jQuery缺失的环节jQuery有点像C语言，威力很大，不过要弄出点像样的前端界面，还得花不少功夫 处理琐碎的事情。还能再简单些吗？Misko Hevery认为在某些应用场景下可以。于是，AngularJS诞生了： AngularJS引入了三个主要的概念，期望让前端开发更系统化一些：1.声明式界面开发2.双向数据绑定3.使用依赖注入解耦 很多人在初次接触AngularJS时，都有些吃惊，因为它把前端开发搞的突然严肃起来 了。考虑到Misko曾经是一个Java程序员，这一切就好理解了。Java程序员擅长引入复杂的架构来解决简单的问题，对吧？","text":"jQuery：用更少的代码，实现更强悍的功能托互联网日新月异发展的福，浏览器变成了人们接入互联网的入口，而JavaScript 这个曾经的小语种，终于成功地站到了舞台的中央，唤起了开发者的兴趣。浏览器里原生的JavaScript有点像汇编语言，不同的浏览器就像不同的CPU架构， 汇编语言各有千秋，这让前端开发者很恼火。聪明人很快发现了这个痛点，于是， 抹平浏览器差异的jQuery库出现了。jQuery由一小撮对浏览器极其熟稔的极客负责抹平不同浏览器的差异，其他开发 者只需要基于jQuery进行开发，可以更好地关注业务实现，而不是把时间花在 适配不同的浏览器上。这样的分工符合经济学原理，开启了一个不可忽视的jQuery时代 满眼的全是DOMjQuery使得开发无刷新动态页面（AJAX）或者单页应用（SPA）变得 相当简单。标准的HTML页面是静态的，被浏览器渲染后就产生了一个DOM树：jQuery让静态的文档动起来，通过提供一系列的选择符，jQuery使开发者能够 极其方便地选中一组DOM节点，对其进行操作。这就是jQuery的开发范式。jQuery没有引入什么新的概念，只是朴素地，让你能够更简单 地、低成本地操作DOM：1.用选择符选定一组DOM节点2.操作选中的DOM节点，比如：修改文本、改变属性、挂接事件监听函数、变换DOM等等。3.基本不用考虑跨浏览器的兼容性 jQuery的API符合大多数开发者的预期，因此，很容易上手。 jQuery缺失的环节jQuery有点像C语言，威力很大，不过要弄出点像样的前端界面，还得花不少功夫 处理琐碎的事情。还能再简单些吗？Misko Hevery认为在某些应用场景下可以。于是，AngularJS诞生了： AngularJS引入了三个主要的概念，期望让前端开发更系统化一些：1.声明式界面开发2.双向数据绑定3.使用依赖注入解耦 很多人在初次接触AngularJS时，都有些吃惊，因为它把前端开发搞的突然严肃起来 了。考虑到Misko曾经是一个Java程序员，这一切就好理解了。Java程序员擅长引入复杂的架构来解决简单的问题，对吧？ 库 vs. 框架jQuery是一个库，库总是被动的，就像工具，应用的开发逻辑是你的，在 某一点上需要用一下工具，就用好了。框架则非常不同，这意味着AngularJS为应用已经搭起了一个架子，约定了 一些组成部分，并且实现了这些部分的拼装运行。换句话说， 应用的开发逻辑是AngularJS的，你得跟着它走。所以，AngularJS难学一些，因为它有一个架子在那，你不了解这个架子， 基本没法下手。 重写示例：模板、指令和视图AngularJS最显著的特点是用静态的HTML文档，就可以生成具有动态行为的页面。还是前面的小时钟示例，我们使用AngularJS模板来重写，示例已经嵌入→_→：HTML文件看起来像普通的HTML，只是其中多了一些特别的标记 （比如：ng-app,ez-clock等等）。在Angular中，这个HTML文件被称为模板。ng-app这样的标记我们称之为指令。模板通过指令指示AngularJS进行必要的操作。 比如：ng-app指令用来通知AngularJS自动引导应用；ez-clock 指令用来通知AngularJS生成指定的时钟组件。当AngularJS启动应用时，它会通过一个编译器解析处理这个模板文件，生成的结果就是： 视图： 我们定义了两个部件：模板（包含指令的HTML文件）和指令实现 （JavaScript文件），AngularJS将这两部分拼装起来，生成了最终的视图。有点理解框架的含义了吗？ angular.module(&quot;ezstuff&quot;,[])//创建模块ezstuff .directive(&quot;ezClock&quot;,function(){//在模块上注册指令ezClock的类工厂 return { restrict : &quot;E&quot;, replace : true, template : &quot;&lt;div class=&apos;clock&apos;&gt;&lt;/div&gt;&quot;, link : function(scope,element,attrs){ setInterval(function(){ //获取当前时间 var d = new Date(); //element对应引用该指令的DOM对象的jqLite封装 element.text(d.toString()); },1000); } } }) 使用指令封装JavaScript代码我们在模板中使用了一个自定义的标签ez-clock，而他变成了一个会动的时钟，这期间发生了什么呢？ 可以肯定的是这肯定不是浏览器干的，他不认识ez-block是什么东西，angularjs引入了基本的angularjs库，他会在浏览器载入html文档并且建立好DOM树后，执行以下操作： 1，找到有ng-app属性的DOM节点 2，以这个节点为根节点，搜索自定义指令，发现ez-clock 3，调用ez-clock指令的实现函数（指令类工厂）进行展开我们的定义，ez-clock的展开操作如下： 1 使用一个div元素替换这个自定义标签 2 创建一个定时器，在定时器触发时刷新div元素的innerText ez-clock这样的非html标准的标签，在angularjs中之所以称之为指令/directive，就是只看到它时，基础框架需要对其进行解释，以便展开成浏览器可以理解的东西，而这个解释的过程称之为：编译。 可见，angularjs框架要求将HTML文档和JavaScript代码分割的更清晰，通常混杂在HTML文档中的JavaScript代码，需要一直领的形式进行封装，而模板、指令实现代码这两个不见，则有基础框架负责拼装运行。 起点：声明化基于前面的实例，我们很容易感受到angularjs进行应用开发的一个重要的思维模式：葱构造声明式界面入手。 事实上，这也是misko开发angularjs最初的动机吧。 在使用angularjs进行开发时，始终应该从构造函数声明式界面模板开始，如果现在的指令不够，那么就定义自己的指令，实现自己的指令、实现自己的指令。这是一个选代的过程。 记住：指令是新型的API，用界面的声明化作为需求，来指导我们的代码封装。 层级的作用域在angularjs中，ng-app开始的DOM子树上，每个DOM对象都有一个对应的scope对象。比如，在我们的实例中，body对象对应一个scope对象，因为body这时候有ng-app属性，所以这个scope就是$rootscope对象，ez-clock对象也对应有一个scope对象…….. 在默认情况下，一个DOM子元素不会创建新的作用域，也就是说，这个子元素所对应的scope对象，其实就是它的最近一级的祖先对象对应的scope对象。比如，在我们的例子上，ez-namecard对应的scope对象，就是它的父对象即body对象的scope对象，恰好也就是$rootScope对象；而ez-namecard有三个div子元素对应的scope对象，也就是$rootScope对象。 有些指令会导致创建新的作用域，比如ng-controller。如果在一个DOM对象上创建了新的作用域，那么这个scope对象的原型是其最近一级的组件对象的scope对象。 比如在我们的例子中，如果在ez-namecard上使用ng-controller指令，那么ez-namecard对应的scope对象就不会是body对应的$rootScope对象，但是由于原型继承，所以通过这个scope依然可以访问sb变量。 监听数据的变化我们已经实现了将数据显示到界面上，不过这还不够。由于编译仅仅在启动引导时执行一次，这就意味着我们的link函数只会被调用一次，那么，如果数据变化，在界面上将不会有任何反馈，所以我们要监听数据的变化。 $watch(watchExpression listener ,[objecEquality]) $watch 方法又三个参数： 1，watchExpression - 要监听的表达式 2，listener - 变化发生时的回调函数，angularjs将这个函数传入新值和旧值 3，objectEquality - 如果要监听表达式的值是一个对象，应当将这个参数置为true 数据变化的传播数据绑定有两个方向： 数据到界面：我们使用scope对象的$watch()方法监听数据的变化，来更新界面。 界面到数据：我们在界面的DOM对象上监听变化时间，来更新数据，并通过$apply()方法传播变化。上面的图中，我们把ez-namecard和ez-namecard-editor都绑定到同一个sb对象上，那么在 ez-namecard-editor上进行编辑，将导致sb对象发生变化；由于ez-namecard监听了这个变化， 所以，ez-namecard的显示也应该变化。","categories":[],"tags":[{"name":"angular","slug":"angular","permalink":"http://www.shenzjd.cn/tags/angular/"}]},{"title":"Hexo博客填坑记","slug":"Hexo博客填坑记","date":"2014-09-06T13:59:34.000Z","updated":"2016-07-06T14:31:44.363Z","comments":true,"path":"2014/09/06/Hexo博客填坑记/","link":"","permalink":"http://www.shenzjd.cn/2014/09/06/Hexo博客填坑记/","excerpt":"博客搭建的流程这里就不多说了，都是各种填坑吧，网上的教程数不胜数，但是都是千篇一律，这里主要写下我自己的填坑过程吧。ps：本人不是文科生，也不是什么作家，写作水平有限，就是简单的当个日记，记录下曾经填过的坑！","text":"博客搭建的流程这里就不多说了，都是各种填坑吧，网上的教程数不胜数，但是都是千篇一律，这里主要写下我自己的填坑过程吧。ps：本人不是文科生，也不是什么作家，写作水平有限，就是简单的当个日记，记录下曾经填过的坑！ hexo在hexo上面的托管 刚开始在本地搭建博客之后，是直接托管到hexo上面的，但是由于博客多了在github上面的文件越来越多，不便于管理，所以要在创建一个分支，专门用来托管hexo的配置文件，这样就算是换了电脑，也可以进行clone操作，直接操作我们的博客了。 Hexo部署到GitHub上的文件，是.md（你的博文）转化之后的.html（静态网页）。因此，当你重装电脑或者想在不同电脑上修改博客时，就不可能了（除非你自己写html o(^▽^)o ）。其实，Hexo生成的网站文件中有.gitignore文件，因此它的本意也是想我们将Hexo生成的网站文件存放到GitHub上进行管理的。这样，不仅解决了上述的问题，还可以通过git的版本控制追踪你的博文的修改过程，是极赞的。 但是，如果每一个GitHub Pages都需要创建一个额外的仓库来存放Hexo网站文件，我感觉很麻烦。所以，我利用了分支！！！简单地说，每个想建立GitHub Pages的仓库，起码有两个分支，一个用来存放Hexo网站的文件，一个用来发布网站。下面以我的博客作为例子详细地讲述。 我的博客搭建流程本地搭建流程首先确定你的电脑上安装了Node.js和git，然后用npm进行安装hexo $ npm install -g hexo-cli 下面就是建站了： $ hexo init $ npm install $ hexo generate $ hexo server 现在打开本地的localhost:4000就可以看到hexo的界面了。 github网站流程1,创建仓库，wu529778790.github.io；2,创建两个分支：master 与 hexo；3,设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；4,使用git clone git@github.com:wu529778790/wu529778790.github.io.git拷贝仓库；5,在本地wu529778790.github.io文件夹下通过Git bash依次执行npm install hexo、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）;6,修改_config.yml中的deploy参数，分支应为master；7,依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件；8,执行hexo generate -d生成网站并部署到GitHub上。9,这样一来，在GitHub上的wu529778790.github.io仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美( •̀ ω •́ )y！ 填坑记录首先是没有安装git部署的插件 $ npm install hexo-deployer-git --save 然后执行下面的指令即可完成部署 $ hexo generate $ hexo deploy 最后要说的是git提交的时候遇见的问题了，不得不总结一下，这次的坑太大，当天应是没解决。提交hexo分支到github上的时候一直报错，百度了各种解决办法还是不行，按照下面的办法终于实现了把配置上传到hexo分支，而自己的文章页面在master分支。 git remote add origin git@github.com:wu529778790/wu529778790.github.io.git git add * git push origin hexo 好了，此次博客就更新到这吧，感觉也没人可以看懂吧，就是我自己的笔记，啥时候忘了自己来看看，O(∩_∩)O哈哈~","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.shenzjd.cn/tags/hexo/"}]},{"title":"MarkDown语法小记","slug":"MarkDown语法小记","date":"2014-07-14T11:53:22.000Z","updated":"2016-07-14T12:06:44.158Z","comments":true,"path":"2014/07/14/MarkDown语法小记/","link":"","permalink":"http://www.shenzjd.cn/2014/07/14/MarkDown语法小记/","excerpt":"","text":"刚开始不介绍下作者，内心都说不过去啊，那我就百度科普下。 什么是 Markdown？Markdown 最初是由 John Gruber 和 Aaron Swartz 于 2004 年共同设计的（在这里插一句，Aaron Swartz 是一个富有传奇性的人物，绝对值得大家了解一下。他曾经利用麻省理工学院网络，伪造身份，侵入收费不菲的 JSTOR 论文数据库，总共下载480万篇论文，以供公众免费下载，他也因此被联邦政府起诉逮捕。他于 2013 年自杀，年仅 27 岁）。它是一种用来标记文字的语法，这种语法十分简单，十分钟左右的时间就可以完全掌握。只要使用少量的几个特殊字符（常用的有「#」和「*」）就可以完成一些加粗、斜体、引用等排版工作，因其易学性和便捷性而受到越来越多人的欢迎。使用 Markdown 进行排版可以大大地节省你在排版中所花费的时间，让你更加专注于写作。 Markdown 基本语法1. 设置标题Markdown 最多支持六个级别的标题设置，设置标题也十分简单，只要在在每一行的开始使用井号「#」就可以创建标题，「#」的数量决定了标题的级别。例如： # 我是小美 ## 我是小小美 ### 我是小小小美 2. 斜体在想要变斜体的文本两旁各加一个星号「*」就可以将该文本变为斜体了。例如： 你们知道没有喝脉动的小美长什么样子么？ 长这样： *小美* 3.加粗在想要加粗的文本两旁各加两个星号「**」就可以将该文本加粗了。例如： 你们知道成天吃肉的小美长什么样子么？ 长这样： **小美** 如果你又想加粗这个文本又想把这个文本变斜体的话，在该文本的两旁各加三个星号「*」就可以了。比如说： 你们知道没有喝脉动又成天吃肉的小美长什么样子么？ 长这样： ***小美*** 4.引用如果想要显示出别人说的话或者是引用其他人的观点的话，只需要在这段话的开头加一个大于号「&gt;」即可。例如： 有一天，小最对正在疯狂减肥的小美说： &gt; 你快别减肥了，肉没减下来多少，胸倒是快减没了。 如果说想要在引用内再次引用的话，只需要敲下回车然后加两个大于号「&gt;&gt;」就好了，如果想要在引用内的引用继续引用的话（喘口气先）那就加三个大于号「&gt;&gt;&gt;」。例如： 有一天小美睡不着，她就缠着小最给她讲故事，于是小最就给她讲了一个故事： &gt; 很久以前有只小美睡不着，要小最给她讲故事，小最就给她讲了下面这个故事： &gt;&gt; 很久以前有只小美睡不着，要小最给她讲故事，小最就给她讲了下面这个故事： &gt;&gt;&gt; …… 效果： 有一天小美睡不着，她就缠着小最给她讲故事，于是小最就给她讲了一个故事： 很久以前有只小美睡不着，要小最给她讲故事，小最就给她讲了下面这个故事： 很久以前有只小美睡不着，要小最给她讲故事，小最就给她讲了下面这个故事： …… 5.列表Markdown 支持无序列表和有序列表两种列表。无序列表只需要在列表项加一个减号「-」就可以了。此外，加一个星号「*」或者是一个加号「+」也会有同样的效果。建立有序列表也很简单，一个数字加一个英文句号「.」就可以搞定。如果你想在一个列表项中下设一个子列表的话，我建议大家在子列表前加两个空格，更有区分度。下面就给大家举个栗子： **本周小最要干的事情** - 继续赚好多钱给小美花！ - 和小美一起去看 Zootopia！ - 超市大采购！ 1. 搓衣板 2. 一箱，不，两箱袋装泡面 3. 遥控器 4. 护膝/哭/ - 给小美洗外套洗衬衫洗睡衣洗裙子洗毛衣洗内裤洗袜子…… 显示效果如下： 本周小最要干的事情 继续赚好多钱给小美花！ 和小美一起去看 Zootopia！ 超市大采购！ 搓衣板 一箱，不，两箱袋装泡面 遥控器 护膝/哭/ 给小美洗外套洗衬衫洗睡衣洗裙子洗毛衣洗内裤洗袜子……","categories":[],"tags":[{"name":"MarkDown","slug":"MarkDown","permalink":"http://www.shenzjd.cn/tags/MarkDown/"}]}]}